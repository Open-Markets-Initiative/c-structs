/*******************************************************************************
 * C Structs For Eurex Cash T7 Eti 8.1 protocol
 *******************************************************************************/

/*******************************************************************************
 * Enum Values
 *******************************************************************************/

/*
 * Alloc Method Values
 */ 
#define ENUM_ALLOC_METHOD_AUTOMATIC_RANDOM_1 = 1
#define ENUM_ALLOC_METHOD_MANUAL_3 = 3
#define ENUM_ALLOC_METHOD_ALLOC_METHOD_MINIMUM_VALUE_3 = 3
#define ENUM_ALLOC_METHOD_ALLOC_METHOD_MINIMUM_VALUE_1 = 1

/*
 * Appl Id Values
 */ 
#define ENUM_APPL_ID_TRADE_1 = 1
#define ENUM_APPL_ID_NEWS_2 = 2
#define ENUM_APPL_ID_SERVICEAVAILABILITY_3 = 3
#define ENUM_APPL_ID_SESSIONDATA_4 = 4
#define ENUM_APPL_ID_LISTENERDATA_5 = 5
#define ENUM_APPL_ID_RISK_CONTROL_6 = 6
#define ENUM_APPL_ID_TES_MAINTENANCE_7 = 7
#define ENUM_APPL_ID_TES_TRADE_8 = 8
#define ENUM_APPL_ID_SRQS_MAINTENANCE_9 = 9
#define ENUM_APPL_ID_SERVICE_AVAILABILITY_MARKET_10 = 10
#define ENUM_APPL_ID_SPECIALIST_DATA_11 = 11
#define ENUM_APPL_ID_APPL_ID_MINIMUM_VALUE_11 = 11
#define ENUM_APPL_ID_APPL_ID_MINIMUM_VALUE_0 = 0

/*
 * Appl Id Status Values
 */ 
#define ENUM_APPL_ID_STATUS_OUTBOUNDCONVERSIONERROR_105 = 105
#define ENUM_APPL_ID_STATUS_APPL_ID_STATUS_MINIMUM_VALUE_4294967294 = 4294967294
#define ENUM_APPL_ID_STATUS_APPL_ID_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Appl Resend Flag Values
 */ 
#define ENUM_APPL_RESEND_FLAG_FALSE_0 = 0
#define ENUM_APPL_RESEND_FLAG_TRUE_1 = 1
#define ENUM_APPL_RESEND_FLAG_APPL_RESEND_FLAG_MINIMUM_VALUE_1 = 1
#define ENUM_APPL_RESEND_FLAG_APPL_RESEND_FLAG_MINIMUM_VALUE_0 = 0

/*
 * Appl Seq Indicator Values
 */ 
#define ENUM_APPL_SEQ_INDICATOR_NO_RECOVERY_REQUIRED_0 = 0
#define ENUM_APPL_SEQ_INDICATOR_RECOVERY_REQUIRED_1 = 1
#define ENUM_APPL_SEQ_INDICATOR_APPL_SEQ_INDICATOR_MINIMUM_VALUE_1 = 1
#define ENUM_APPL_SEQ_INDICATOR_APPL_SEQ_INDICATOR_MINIMUM_VALUE_0 = 0

/*
 * Appl Seq Status Values
 */ 
#define ENUM_APPL_SEQ_STATUS_UNAVAILABLE_0 = 0
#define ENUM_APPL_SEQ_STATUS_AVAILABLE_1 = 1
#define ENUM_APPL_SEQ_STATUS_APPL_SEQ_STATUS_MINIMUM_VALUE_1 = 1
#define ENUM_APPL_SEQ_STATUS_APPL_SEQ_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Appl Usage Orders Values
 */ 
#define ENUM_APPL_USAGE_ORDERS_AUTOMATED_A = 'A'
#define ENUM_APPL_USAGE_ORDERS_MANUAL_M = 'M'
#define ENUM_APPL_USAGE_ORDERS_AUTO_SELECT_B = 'B'
#define ENUM_APPL_USAGE_ORDERS_NONE_N = 'N'

/*
 * Appl Usage Quotes Values
 */ 
#define ENUM_APPL_USAGE_QUOTES_AUTOMATED_A = 'A'
#define ENUM_APPL_USAGE_QUOTES_MANUAL_M = 'M'
#define ENUM_APPL_USAGE_QUOTES_AUTO_SELECT_B = 'B'
#define ENUM_APPL_USAGE_QUOTES_NONE_N = 'N'

/*
 * Clearing Instruction Values
 */ 
#define ENUM_CLEARING_INSTRUCTION_BILATERALNETTINGONLY_2 = 2
#define ENUM_CLEARING_INSTRUCTION_SELFCLEARING_13 = 13
#define ENUM_CLEARING_INSTRUCTION_CLEARING_INSTRUCTION_MINIMUM_VALUE_13 = 13
#define ENUM_CLEARING_INSTRUCTION_CLEARING_INSTRUCTION_MINIMUM_VALUE_2 = 2

/*
 * Crossed Indicator Values
 */ 
#define ENUM_CROSSED_INDICATOR_NOCROSSING_0 = 0
#define ENUM_CROSSED_INDICATOR_CROSSREJECTED_1 = 1
#define ENUM_CROSSED_INDICATOR_CROSSED_INDICATOR_MINIMUM_VALUE_1 = 1
#define ENUM_CROSSED_INDICATOR_CROSSED_INDICATOR_MINIMUM_VALUE_0 = 0

/*
 * Delete Reason Values
 */ 
#define ENUM_DELETE_REASON_NOSPECIALREASON_100 = 100
#define ENUM_DELETE_REASON_TAS_CHANGE_101 = 101
#define ENUM_DELETE_REASON_INTRADAY_EXPIRATION_102 = 102
#define ENUM_DELETE_REASON_RISK_EVENT_103 = 103
#define ENUM_DELETE_REASON_STOP_TRADING_104 = 104
#define ENUM_DELETE_REASON_DELETE_REASON_MINIMUM_VALUE_109 = 109
#define ENUM_DELETE_REASON_DELETE_REASON_MINIMUM_VALUE_100 = 100

/*
 * Delivery Type Values
 */ 
#define ENUM_DELIVERY_TYPE_AKV_1 = 1
#define ENUM_DELIVERY_TYPE_GS_2 = 2
#define ENUM_DELIVERY_TYPE_STR_3 = 3
#define ENUM_DELIVERY_TYPE_WPR_4 = 4
#define ENUM_DELIVERY_TYPE_AKT_5 = 5
#define ENUM_DELIVERY_TYPE_DELIVERY_TYPE_MINIMUM_VALUE_5 = 5
#define ENUM_DELIVERY_TYPE_DELIVERY_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Event Type Values
 */ 
#define ENUM_EVENT_TYPE_REDEMPTION_26 = 26
#define ENUM_EVENT_TYPE_DELISTING_100 = 100
#define ENUM_EVENT_TYPE_INSTRUMENT_ASSIGNMENT_ADDED_104 = 104
#define ENUM_EVENT_TYPE_INSTRUMENT_ASSIGNMENT_REMOVED_105 = 105
#define ENUM_EVENT_TYPE_CLOSED_106 = 106
#define ENUM_EVENT_TYPE_RESTRICTED_107 = 107
#define ENUM_EVENT_TYPE_BOOK_108 = 108
#define ENUM_EVENT_TYPE_CONTINUOUS_109 = 109
#define ENUM_EVENT_TYPE_AUCTION_110 = 110
#define ENUM_EVENT_TYPE_FREEZE_111 = 111
#define ENUM_EVENT_TYPE_CANCEL_FREEZE_112 = 112
#define ENUM_EVENT_TYPE_PRE_CALL_113 = 113
#define ENUM_EVENT_TYPE_ENDOF_RESTATEMENT_114 = 114
#define ENUM_EVENT_TYPE_EVENT_TYPE_MINIMUM_VALUE_114 = 114
#define ENUM_EVENT_TYPE_EVENT_TYPE_MINIMUM_VALUE_8 = 8

/*
 * Ex Destination Type Values
 */ 
#define ENUM_EX_DESTINATION_TYPE_TRADEONEXCHANGEOR_SI_3 = 3
#define ENUM_EX_DESTINATION_TYPE_EX_DESTINATION_TYPE_MINIMUM_VALUE_3 = 3
#define ENUM_EX_DESTINATION_TYPE_EX_DESTINATION_TYPE_MINIMUM_VALUE_3 = 3

/*
 * Exec Inst Values
 */ 
#define ENUM_EXEC_INST_H1 = 1
#define ENUM_EXEC_INST_Q2 = 2
#define ENUM_EXEC_INST_HQ_3 = 3
#define ENUM_EXEC_INST_H65 = 5
#define ENUM_EXEC_INST_Q66 = 6
#define ENUM_EXEC_INST_EXEC_INST_MINIMUM_VALUE_6 = 6
#define ENUM_EXEC_INST_EXEC_INST_MINIMUM_VALUE_1 = 1

/*
 * Exec Restatement Reason Values
 */ 
#define ENUM_EXEC_RESTATEMENT_REASON_CORPORATE_ACTION_0 = 0
#define ENUM_EXEC_RESTATEMENT_REASON_ORDER_BOOK_RESTATEMENT_1 = 1
#define ENUM_EXEC_RESTATEMENT_REASON_EXCHANGE_OPTION_8 = 8
#define ENUM_EXEC_RESTATEMENT_REASON_ORDER_ADDED_101 = 101
#define ENUM_EXEC_RESTATEMENT_REASON_ORDER_MODIFIED_102 = 102
#define ENUM_EXEC_RESTATEMENT_REASON_ORDER_CANCELLED_103 = 103
#define ENUM_EXEC_RESTATEMENT_REASON_IOC_ORDER_CANCELLED_105 = 105
#define ENUM_EXEC_RESTATEMENT_REASON_FOK_ORDER_CANCELLED_107 = 107
#define ENUM_EXEC_RESTATEMENT_REASON_BOOK_ORDER_EXECUTED_108 = 108
#define ENUM_EXEC_RESTATEMENT_REASON_CHANGEDTO_IOC_114 = 114
#define ENUM_EXEC_RESTATEMENT_REASON_CHANGEOF_SPECIALIST_119 = 119
#define ENUM_EXEC_RESTATEMENT_REASON_INSTRUMENT_STATE_CHANGE_122 = 122
#define ENUM_EXEC_RESTATEMENT_REASON_PENDING_NEW_138 = 138
#define ENUM_EXEC_RESTATEMENT_REASON_PENDING_NEW_APPLIED_141 = 141
#define ENUM_EXEC_RESTATEMENT_REASON_PENDING_REPLACE_139 = 139
#define ENUM_EXEC_RESTATEMENT_REASON_PENDING_REPLACE_APPLIED_142 = 142
#define ENUM_EXEC_RESTATEMENT_REASON_END_OF_DAY_PROCESSING_146 = 146
#define ENUM_EXEC_RESTATEMENT_REASON_ORDER_EXPIRATION_148 = 148
#define ENUM_EXEC_RESTATEMENT_REASON_CAO_ORDER_ACTIVATED_149 = 149
#define ENUM_EXEC_RESTATEMENT_REASON_CAO_ORDER_INACTIVATED_150 = 150
#define ENUM_EXEC_RESTATEMENT_REASON_OAO_ORDER_ACTIVATED_151 = 151
#define ENUM_EXEC_RESTATEMENT_REASON_OAO_ORDER_INACTIVATED_152 = 152
#define ENUM_EXEC_RESTATEMENT_REASON_AAO_ORDER_ACTIVATED_153 = 153
#define ENUM_EXEC_RESTATEMENT_REASON_AAO_ORDER_INACTIVATED_154 = 154
#define ENUM_EXEC_RESTATEMENT_REASON_IAO_ORDER_ACTIVATED_159 = 159
#define ENUM_EXEC_RESTATEMENT_REASON_IAO_ORDER_INACTIVATED_160 = 160
#define ENUM_EXEC_RESTATEMENT_REASON_ORDER_REFRESHED_155 = 155
#define ENUM_EXEC_RESTATEMENT_REASON_OCO_ORDER_TRIGGERED_164 = 164
#define ENUM_EXEC_RESTATEMENT_REASON_STOP_ORDER_TRIGGERED_172 = 172
#define ENUM_EXEC_RESTATEMENT_REASON_OWNERSHIP_CHANGED_181 = 181
#define ENUM_EXEC_RESTATEMENT_REASON_ORDER_CANCELLATION_PENDING_197 = 197
#define ENUM_EXEC_RESTATEMENT_REASON_PENDING_CANCELLATION_EXECUTED_199 = 199
#define ENUM_EXEC_RESTATEMENT_REASON_BOC_ORDER_CANCELLED_212 = 212
#define ENUM_EXEC_RESTATEMENT_REASON_TRAILING_STOP_UPDATE_213 = 213
#define ENUM_EXEC_RESTATEMENT_REASON_EXCEEDS_MAXIMUM_QUANTITY_237 = 237
#define ENUM_EXEC_RESTATEMENT_REASON_INVALID_LIMIT_PRICE_238 = 238
#define ENUM_EXEC_RESTATEMENT_REASON_USER_DOES_NOT_EXIST_241 = 241
#define ENUM_EXEC_RESTATEMENT_REASON_SESSION_DOES_NOT_EXIST_242 = 242
#define ENUM_EXEC_RESTATEMENT_REASON_INVALID_STOP_PRICE_243 = 243
#define ENUM_EXEC_RESTATEMENT_REASON_INSTRUMENT_DOES_NOT_EXIST_245 = 245
#define ENUM_EXEC_RESTATEMENT_REASON_BUSINESS_UNIT_RISK_EVENT_246 = 246
#define ENUM_EXEC_RESTATEMENT_REASON_PANIC_CANCEL_261 = 261
#define ENUM_EXEC_RESTATEMENT_REASON_DIVIDEND_PAYMENT_292 = 292
#define ENUM_EXEC_RESTATEMENT_REASON_LAST_TRADING_DAY_294 = 294
#define ENUM_EXEC_RESTATEMENT_REASON_TRADING_PARAMETER_CHANGE_295 = 295
#define ENUM_EXEC_RESTATEMENT_REASON_CURRENCY_CHANGE_296 = 296
#define ENUM_EXEC_RESTATEMENT_REASON_PRODUCT_ASSIGNMENT_CHANGE_297 = 297
#define ENUM_EXEC_RESTATEMENT_REASON_REFERENCE_PRICE_CHANGE_298 = 298
#define ENUM_EXEC_RESTATEMENT_REASON_TICK_RULE_CHANGE_300 = 300
#define ENUM_EXEC_RESTATEMENT_REASON_QRS_EXPIRY_316 = 316
#define ENUM_EXEC_RESTATEMENT_REASON_EXEC_RESTATEMENT_REASON_MINIMUM_VALUE_344 = 344
#define ENUM_EXEC_RESTATEMENT_REASON_EXEC_RESTATEMENT_REASON_MINIMUM_VALUE_0 = 0

/*
 * Exec Type Values
 */ 
#define ENUM_EXEC_TYPE_NEW_0 = '0'
#define ENUM_EXEC_TYPE_CANCELED_4 = '4'
#define ENUM_EXEC_TYPE_REPLACED_5 = '5'
#define ENUM_EXEC_TYPE_PENDING_CANCELE_6 = '6'
#define ENUM_EXEC_TYPE_SUSPENDED_9 = '9'
#define ENUM_EXEC_TYPE_RESTATED_D = 'D'
#define ENUM_EXEC_TYPE_TRIGGERED_L = 'L'
#define ENUM_EXEC_TYPE_TRADE_F = 'F'
#define ENUM_EXEC_TYPE_PENDING_NEW_A = 'A'
#define ENUM_EXEC_TYPE_PENDING_REPLACE_E = 'E'

/*
 * Executing Trader Qualifier Values
 */ 
#define ENUM_EXECUTING_TRADER_QUALIFIER_ALGO_22 = 22
#define ENUM_EXECUTING_TRADER_QUALIFIER_HUMAN_24 = 24
#define ENUM_EXECUTING_TRADER_QUALIFIER_EXECUTING_TRADER_QUALIFIER_MINIMUM_VALUE_24 = 24
#define ENUM_EXECUTING_TRADER_QUALIFIER_EXECUTING_TRADER_QUALIFIER_MINIMUM_VALUE_22 = 22

/*
 * Fill Liquidity Ind Values
 */ 
#define ENUM_FILL_LIQUIDITY_IND_ADDED_LIQUIDITY_1 = 1
#define ENUM_FILL_LIQUIDITY_IND_REMOVED_LIQUIDITY_2 = 2
#define ENUM_FILL_LIQUIDITY_IND_AUCTION_4 = 4
#define ENUM_FILL_LIQUIDITY_IND_TRIGGERED_STOP_ORDER_5 = 5
#define ENUM_FILL_LIQUIDITY_IND_TRIGGERED_OCO_ORDER_6 = 6
#define ENUM_FILL_LIQUIDITY_IND_TRIGGERED_MARKET_ORDER_7 = 7
#define ENUM_FILL_LIQUIDITY_IND_FILL_LIQUIDITY_IND_MINIMUM_VALUE_7 = 7
#define ENUM_FILL_LIQUIDITY_IND_FILL_LIQUIDITY_IND_MINIMUM_VALUE_1 = 1

/*
 * Last Coupon Deviation Indicator Values
 */ 
#define ENUM_LAST_COUPON_DEVIATION_INDICATOR_NONE_0 = 0
#define ENUM_LAST_COUPON_DEVIATION_INDICATOR_SHORTPERIOD_1 = 1
#define ENUM_LAST_COUPON_DEVIATION_INDICATOR_LONGPERIOD_2 = 2
#define ENUM_LAST_COUPON_DEVIATION_INDICATOR_ONLYONECOUPON_3 = 3
#define ENUM_LAST_COUPON_DEVIATION_INDICATOR_SHORTTWOINTERESTPAYMENTSDUE_4 = 4
#define ENUM_LAST_COUPON_DEVIATION_INDICATOR_LONGTWOINTERESTPAYMENTSDUE_5 = 5
#define ENUM_LAST_COUPON_DEVIATION_INDICATOR_PERPETUAL_6 = 6
#define ENUM_LAST_COUPON_DEVIATION_INDICATOR_LAST_COUPON_DEVIATION_INDICATOR_MINIMUM_VALUE_6 = 6
#define ENUM_LAST_COUPON_DEVIATION_INDICATOR_LAST_COUPON_DEVIATION_INDICATOR_MINIMUM_VALUE_0 = 0

/*
 * Last Fragment Values
 */ 
#define ENUM_LAST_FRAGMENT_NOT_LAST_MESSAGE_0 = 0
#define ENUM_LAST_FRAGMENT_LAST_MESSAGE_1 = 1
#define ENUM_LAST_FRAGMENT_LAST_FRAGMENT_MINIMUM_VALUE_1 = 1
#define ENUM_LAST_FRAGMENT_LAST_FRAGMENT_MINIMUM_VALUE_0 = 0

/*
 * Last Mkt Values
 */ 
#define ENUM_LAST_MKT_XETR_3 = 3
#define ENUM_LAST_MKT_XVIE_4 = 4
#define ENUM_LAST_MKT_XMAL_6 = 6
#define ENUM_LAST_MKT_XBUL_7 = 7
#define ENUM_LAST_MKT_XBUD_8 = 8
#define ENUM_LAST_MKT_XLJU_9 = 9
#define ENUM_LAST_MKT_XPRA_10 = 10
#define ENUM_LAST_MKT_XZAG_11 = 11
#define ENUM_LAST_MKT_XFRA_13 = 13
#define ENUM_LAST_MKT_LAST_MKT_MINIMUM_VALUE_255 = 255
#define ENUM_LAST_MKT_LAST_MKT_MINIMUM_VALUE_1 = 1

/*
 * List Update Action Values
 */ 
#define ENUM_LIST_UPDATE_ACTION_ADD_A = 'A'
#define ENUM_LIST_UPDATE_ACTION_DELETE_D = 'D'

/*
 * Market Id Values
 */ 
#define ENUM_MARKET_ID_XETR_3 = 3
#define ENUM_MARKET_ID_XVIE_4 = 4
#define ENUM_MARKET_ID_XMAL_6 = 6
#define ENUM_MARKET_ID_XBUL_7 = 7
#define ENUM_MARKET_ID_XBUD_8 = 8
#define ENUM_MARKET_ID_XLJU_9 = 9
#define ENUM_MARKET_ID_XPRA_10 = 10
#define ENUM_MARKET_ID_XZAG_11 = 11
#define ENUM_MARKET_ID_XFRA_13 = 13
#define ENUM_MARKET_ID_MARKET_ID_MINIMUM_VALUE_255 = 255
#define ENUM_MARKET_ID_MARKET_ID_MINIMUM_VALUE_1 = 1

/*
 * Mass Action Reason Values
 */ 
#define ENUM_MASS_ACTION_REASON_NO_SPECIAL_REASON_0 = 0
#define ENUM_MASS_ACTION_REASON_STOP_TRADING_1 = 1
#define ENUM_MASS_ACTION_REASON_EMERGENCY_2 = 2
#define ENUM_MASS_ACTION_REASON_SESSION_LOSS_6 = 6
#define ENUM_MASS_ACTION_REASON_DUPLICATE_SESSION_LOGIN_7 = 7
#define ENUM_MASS_ACTION_REASON_CLEARING_RISK_CONTROL_8 = 8
#define ENUM_MASS_ACTION_REASON_INTERNAL_CONNECTION_LOSS_100 = 100
#define ENUM_MASS_ACTION_REASON_PRODUCT_STATE_HALT_105 = 105
#define ENUM_MASS_ACTION_REASON_PRODUCT_STATE_HOLIDAY_106 = 106
#define ENUM_MASS_ACTION_REASON_INSTRUMENT_SUSPENDED_107 = 107
#define ENUM_MASS_ACTION_REASON_VOLATILITY_INTERRUPTION_110 = 110
#define ENUM_MASS_ACTION_REASON_PRODUCTTEMPORARILYNOTTRADEABLE_111 = 111
#define ENUM_MASS_ACTION_REASON_INSTRUMENT_STOPPED_113 = 113
#define ENUM_MASS_ACTION_REASON_INSTRUMENT_KNOCK_OUT_115 = 115
#define ENUM_MASS_ACTION_REASON_INSTRUMENT_SOLD_OUT_116 = 116
#define ENUM_MASS_ACTION_REASON_INSTRUMENT_KNOCK_OUT_REVERTED_118 = 118
#define ENUM_MASS_ACTION_REASON_MASS_ACTION_REASON_MINIMUM_VALUE_200 = 200
#define ENUM_MASS_ACTION_REASON_MASS_ACTION_REASON_MINIMUM_VALUE_0 = 0

/*
 * Mass Action Type Values
 */ 
#define ENUM_MASS_ACTION_TYPE_SUSPENDQUOTES_1 = 1
#define ENUM_MASS_ACTION_TYPE_RELEASEQUOTES_2 = 2
#define ENUM_MASS_ACTION_TYPE_MASS_ACTION_TYPE_MINIMUM_VALUE_2 = 2
#define ENUM_MASS_ACTION_TYPE_MASS_ACTION_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Match Sub Type Values
 */ 
#define ENUM_MATCH_SUB_TYPE_OPENING_AUCTION_1 = 1
#define ENUM_MATCH_SUB_TYPE_CLOSING_AUCTION_2 = 2
#define ENUM_MATCH_SUB_TYPE_INTRADAY_AUCTION_3 = 3
#define ENUM_MATCH_SUB_TYPE_CIRCUIT_BREAKER_AUCTION_4 = 4
#define ENUM_MATCH_SUB_TYPE_MATCH_SUB_TYPE_MINIMUM_VALUE_6 = 6
#define ENUM_MATCH_SUB_TYPE_MATCH_SUB_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Match Type Values
 */ 
#define ENUM_MATCH_TYPE_CONFIRMED_TRADE_REPORT_3 = 3
#define ENUM_MATCH_TYPE_AUTOMATCHINCOMING_4 = 4
#define ENUM_MATCH_TYPE_CROSS_AUCTION_5 = 5
#define ENUM_MATCH_TYPE_CALL_AUCTION_7 = 7
#define ENUM_MATCH_TYPE_SYSTEMATIC_INTERNALISER_9 = 9
#define ENUM_MATCH_TYPE_AUTOMATCHRESTING_11 = 11
#define ENUM_MATCH_TYPE_AUTOMATCHATMIDPOINT_12 = 12
#define ENUM_MATCH_TYPE_CONTINUOUS_AUCTION_14 = 14
#define ENUM_MATCH_TYPE_MATCH_TYPE_MINIMUM_VALUE_14 = 14
#define ENUM_MATCH_TYPE_MATCH_TYPE_MINIMUM_VALUE_0 = 0

/*
 * Matching Engine Status Values
 */ 
#define ENUM_MATCHING_ENGINE_STATUS_UNAVAILABLE_0 = 0
#define ENUM_MATCHING_ENGINE_STATUS_AVAILABLE_1 = 1
#define ENUM_MATCHING_ENGINE_STATUS_MATCHING_ENGINE_STATUS_MINIMUM_VALUE_1 = 1
#define ENUM_MATCHING_ENGINE_STATUS_MATCHING_ENGINE_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Md Book Type Values
 */ 
#define ENUM_MD_BOOK_TYPE_TOP_OF_BOOK_1 = 1
#define ENUM_MD_BOOK_TYPE_PRICE_DEPTH_2 = 2
#define ENUM_MD_BOOK_TYPE_MD_BOOK_TYPE_MINIMUM_VALUE_2 = 2
#define ENUM_MD_BOOK_TYPE_MD_BOOK_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Md Sub Book Type Values
 */ 
#define ENUM_MD_SUB_BOOK_TYPE_VOLUME_WEIGHTED_AVERAGE_2 = 2
#define ENUM_MD_SUB_BOOK_TYPE_MD_SUB_BOOK_TYPE_MINIMUM_VALUE_2 = 2
#define ENUM_MD_SUB_BOOK_TYPE_MD_SUB_BOOK_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Message Event Source Values
 */ 
#define ENUM_MESSAGE_EVENT_SOURCE_BROADCASTTO_INITIATOR_I = 'I'
#define ENUM_MESSAGE_EVENT_SOURCE_BROADCASTTO_APPROVER_A = 'A'
#define ENUM_MESSAGE_EVENT_SOURCE_BROADCASTTO_REQUESTER_R = 'R'
#define ENUM_MESSAGE_EVENT_SOURCE_BROADCASTTO_QUOTE_SUBMITTER_Q = 'Q'

/*
 * Number Of Resp Disclosure Instruction Values
 */ 
#define ENUM_NUMBER_OF_RESP_DISCLOSURE_INSTRUCTION_NO_0 = 0
#define ENUM_NUMBER_OF_RESP_DISCLOSURE_INSTRUCTION_YES_1 = 1
#define ENUM_NUMBER_OF_RESP_DISCLOSURE_INSTRUCTION_NUMBER_OF_RESP_DISCLOSURE_INSTRUCTION_MINIMUM_VALUE_1 = 1
#define ENUM_NUMBER_OF_RESP_DISCLOSURE_INSTRUCTION_NUMBER_OF_RESP_DISCLOSURE_INSTRUCTION_MINIMUM_VALUE_0 = 0

/*
 * Ord Status Values
 */ 
#define ENUM_ORD_STATUS_NEW_0 = '0'
#define ENUM_ORD_STATUS_PARTIALLYFILLED_1 = '1'
#define ENUM_ORD_STATUS_FILLED_2 = '2'
#define ENUM_ORD_STATUS_CANCELED_4 = '4'
#define ENUM_ORD_STATUS_PENDING_CANCEL_6 = '6'
#define ENUM_ORD_STATUS_SUSPENDED_9 = '9'
#define ENUM_ORD_STATUS_PENDING_NEW_A = 'A'
#define ENUM_ORD_STATUS_PENDING_REPLACE_E = 'E'

/*
 * Ord Type Values
 */ 
#define ENUM_ORD_TYPE_MARKET_1 = 1
#define ENUM_ORD_TYPE_LIMIT_2 = 2
#define ENUM_ORD_TYPE_STOP_3 = 3
#define ENUM_ORD_TYPE_STOP_LIMIT_4 = 4
#define ENUM_ORD_TYPE_ORD_TYPE_MINIMUM_VALUE_4 = 4
#define ENUM_ORD_TYPE_ORD_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Order Attribute Liquidity Provision Values
 */ 
#define ENUM_ORDER_ATTRIBUTE_LIQUIDITY_PROVISION_Y1 = 1
#define ENUM_ORDER_ATTRIBUTE_LIQUIDITY_PROVISION_N0 = 0
#define ENUM_ORDER_ATTRIBUTE_LIQUIDITY_PROVISION_ORDER_ATTRIBUTE_LIQUIDITY_PROVISION_MINIMUM_VALUE_1 = 1
#define ENUM_ORDER_ATTRIBUTE_LIQUIDITY_PROVISION_ORDER_ATTRIBUTE_LIQUIDITY_PROVISION_MINIMUM_VALUE_0 = 0

/*
 * Order Category Values
 */ 
#define ENUM_ORDER_CATEGORY_ORDER_1 = '1'
#define ENUM_ORDER_CATEGORY_QUOTE_2 = '2'

/*
 * Order Event Type Values
 */ 
#define ENUM_ORDER_EVENT_TYPE_PENDINGREQUESTSDISCARDED_100 = 100
#define ENUM_ORDER_EVENT_TYPE_ORDER_EVENT_TYPE_MINIMUM_VALUE_100 = 100
#define ENUM_ORDER_EVENT_TYPE_ORDER_EVENT_TYPE_MINIMUM_VALUE_100 = 100

/*
 * Order Origination Values
 */ 
#define ENUM_ORDER_ORIGINATION_DIRECTACCESSORSPONSOREDACCESSCUSTOMER_5 = 5
#define ENUM_ORDER_ORIGINATION_ORDER_ORIGINATION_MINIMUM_VALUE_5 = 5
#define ENUM_ORDER_ORIGINATION_ORDER_ORIGINATION_MINIMUM_VALUE_5 = 5

/*
 * Order Routing Indicator Values
 */ 
#define ENUM_ORDER_ROUTING_INDICATOR_YES_Y = 'Y'
#define ENUM_ORDER_ROUTING_INDICATOR_NO_N = 'N'

/*
 * Ownership Indicator Values
 */ 
#define ENUM_OWNERSHIP_INDICATOR_NO_CHANGEOF_OWNERSHIP_0 = 0
#define ENUM_OWNERSHIP_INDICATOR_CHANGETO_EXECUTING_TRADER_1 = 1
#define ENUM_OWNERSHIP_INDICATOR_OWNERSHIP_INDICATOR_MINIMUM_VALUE_1 = 1
#define ENUM_OWNERSHIP_INDICATOR_OWNERSHIP_INDICATOR_MINIMUM_VALUE_0 = 0

/*
 * Party Action Type Values
 */ 
#define ENUM_PARTY_ACTION_TYPE_HALT_TRADING_1 = 1
#define ENUM_PARTY_ACTION_TYPE_REINSTATE_2 = 2
#define ENUM_PARTY_ACTION_TYPE_PARTY_ACTION_TYPE_MINIMUM_VALUE_2 = 2
#define ENUM_PARTY_ACTION_TYPE_PARTY_ACTION_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Party Detail Role Qualifier Values
 */ 
#define ENUM_PARTY_DETAIL_ROLE_QUALIFIER_TRADER_10 = 10
#define ENUM_PARTY_DETAIL_ROLE_QUALIFIER_HEAD_TRADER_11 = 11
#define ENUM_PARTY_DETAIL_ROLE_QUALIFIER_SUPERVISOR_12 = 12
#define ENUM_PARTY_DETAIL_ROLE_QUALIFIER_PARTY_DETAIL_ROLE_QUALIFIER_MINIMUM_VALUE_12 = 12
#define ENUM_PARTY_DETAIL_ROLE_QUALIFIER_PARTY_DETAIL_ROLE_QUALIFIER_MINIMUM_VALUE_10 = 10

/*
 * Party Detail Status Values
 */ 
#define ENUM_PARTY_DETAIL_STATUS_ACTIVE_0 = 0
#define ENUM_PARTY_DETAIL_STATUS_SUSPEND_1 = 1
#define ENUM_PARTY_DETAIL_STATUS_PARTY_DETAIL_STATUS_MINIMUM_VALUE_2 = 2
#define ENUM_PARTY_DETAIL_STATUS_PARTY_DETAIL_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Party Id Entering Firm Values
 */ 
#define ENUM_PARTY_ID_ENTERING_FIRM_PARTICIPANT_1 = 1
#define ENUM_PARTY_ID_ENTERING_FIRM_MARKET_SUPERVISION_2 = 2
#define ENUM_PARTY_ID_ENTERING_FIRM_PARTY_ID_ENTERING_FIRM_MINIMUM_VALUE_3 = 3
#define ENUM_PARTY_ID_ENTERING_FIRM_PARTY_ID_ENTERING_FIRM_MINIMUM_VALUE_1 = 1

/*
 * Party Id Investment Decision Maker Qualifier Values
 */ 
#define ENUM_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_ALGO_22 = 22
#define ENUM_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_HUMAN_24 = 24
#define ENUM_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_MINIMUM_VALUE_24 = 24
#define ENUM_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_MINIMUM_VALUE_22 = 22

/*
 * Price Validity Check Type Values
 */ 
#define ENUM_PRICE_VALIDITY_CHECK_TYPE_NONE_0 = 0
#define ENUM_PRICE_VALIDITY_CHECK_TYPE_MANDATORY_2 = 2
#define ENUM_PRICE_VALIDITY_CHECK_TYPE_PRICE_VALIDITY_CHECK_TYPE_MINIMUM_VALUE_2 = 2
#define ENUM_PRICE_VALIDITY_CHECK_TYPE_PRICE_VALIDITY_CHECK_TYPE_MINIMUM_VALUE_0 = 0

/*
 * Quote Cancel Type Values
 */ 
#define ENUM_QUOTE_CANCEL_TYPE_CANCEL_ALL_QUOTES_4 = 4
#define ENUM_QUOTE_CANCEL_TYPE_QUOTE_CANCEL_TYPE_MINIMUM_VALUE_4 = 4
#define ENUM_QUOTE_CANCEL_TYPE_QUOTE_CANCEL_TYPE_MINIMUM_VALUE_4 = 4

/*
 * Quote Entry Reject Reason Values
 */ 
#define ENUM_QUOTE_ENTRY_REJECT_REASON_UNKNOWN_SECURITY_1 = 1
#define ENUM_QUOTE_ENTRY_REJECT_REASON_DUPLICATE_QUOTE_6 = 6
#define ENUM_QUOTE_ENTRY_REJECT_REASON_INVALID_PRICE_8 = 8
#define ENUM_QUOTE_ENTRY_REJECT_REASON_NO_REFERENCE_PRICE_AVAILABLE_16 = 16
#define ENUM_QUOTE_ENTRY_REJECT_REASON_NO_SINGLE_SIDED_QUOTES_100 = 100
#define ENUM_QUOTE_ENTRY_REJECT_REASON_INVALID_QUOTING_MODEL_103 = 103
#define ENUM_QUOTE_ENTRY_REJECT_REASON_INVALID_SIZE_106 = 106
#define ENUM_QUOTE_ENTRY_REJECT_REASON_BID_PRICE_NOT_REASONABLE_108 = 108
#define ENUM_QUOTE_ENTRY_REJECT_REASON_ASK_PRICE_NOT_REASONABLE_109 = 109
#define ENUM_QUOTE_ENTRY_REJECT_REASON_BID_PRICE_EXCEEDS_RANGE_110 = 110
#define ENUM_QUOTE_ENTRY_REJECT_REASON_ASK_PRICE_EXCEEDS_RANGE_111 = 111
#define ENUM_QUOTE_ENTRY_REJECT_REASON_INSTRUMENT_STATE_FREEZE_115 = 115
#define ENUM_QUOTE_ENTRY_REJECT_REASON_DELETION_ALREADY_PENDING_116 = 116
#define ENUM_QUOTE_ENTRY_REJECT_REASON_PRE_TRADE_RISK_SESSION_LIMIT_EXCEEDED_117 = 117
#define ENUM_QUOTE_ENTRY_REJECT_REASON_PRE_TRADE_RISK_BU_LIMIT_EXCEEDED_118 = 118
#define ENUM_QUOTE_ENTRY_REJECT_REASON_BID_VALUE_EXCEEDS_LIMIT_120 = 120
#define ENUM_QUOTE_ENTRY_REJECT_REASON_ASK_VALUE_EXCEEDS_LIMIT_121 = 121
#define ENUM_QUOTE_ENTRY_REJECT_REASON_NOT_TRADEABLE_FOR_BUSINESS_UNIT_122 = 122
#define ENUM_QUOTE_ENTRY_REJECT_REASON_QUANTITY_LIMIT_EXCEEDED_125 = 125
#define ENUM_QUOTE_ENTRY_REJECT_REASON_VALUE_LIMIT_EXCEEDED_126 = 126
#define ENUM_QUOTE_ENTRY_REJECT_REASON_INVALID_QUOTE_SPREAD_127 = 127
#define ENUM_QUOTE_ENTRY_REJECT_REASON_CANT_PROC_IN_CURR_INSTR_STATE_131 = 131
#define ENUM_QUOTE_ENTRY_REJECT_REASON_INVALID_QUOTE_TYPE_134 = 134
#define ENUM_QUOTE_ENTRY_REJECT_REASON_PWT_QUOTENOTALLOWEDINCURRENTSTATE_135 = 135
#define ENUM_QUOTE_ENTRY_REJECT_REASON_STANDARD_QUOTENOTALLOWEDINCURRENTSTATE_136 = 136
#define ENUM_QUOTE_ENTRY_REJECT_REASON_PWT_QUOTENOTALLOWEDWITHCROSSEDBOOK_137 = 137
#define ENUM_QUOTE_ENTRY_REJECT_REASON_ASKSIDEQUOTENOTALLOWED_138 = 138
#define ENUM_QUOTE_ENTRY_REJECT_REASON_ASKSIDEQUOTEWITHQTYNOTALLOWED_139 = 139
#define ENUM_QUOTE_ENTRY_REJECT_REASON_INVALIDCHANGE_L_PSESSION_140 = 140
#define ENUM_QUOTE_ENTRY_REJECT_REASON_ON_BOOK_TRADINGDISABLEDFOR_INSTRUMENT_TYPE_144 = 144
#define ENUM_QUOTE_ENTRY_REJECT_REASON_L_PLICENCENOTASSIGNED_145 = 145
#define ENUM_QUOTE_ENTRY_REJECT_REASON_S_PLICENCENOTASSIGNED_146 = 146
#define ENUM_QUOTE_ENTRY_REJECT_REASON_LIQUIDITYPROVIDERPROTECTIONBIDSIDECANCELLED_147 = 147
#define ENUM_QUOTE_ENTRY_REJECT_REASON_LIQUIDITYPROVIDERPROTECTIONASKSIDECANCELLED_148 = 148
#define ENUM_QUOTE_ENTRY_REJECT_REASON_QUANTITY_LIMIT_EXCEEDED_INSTRUMENT_149 = 149
#define ENUM_QUOTE_ENTRY_REJECT_REASON_VALUE_LIMIT_EXCEEDED_INSTRUMENT_150 = 150
#define ENUM_QUOTE_ENTRY_REJECT_REASON_ISSUER_STOPPED_151 = 151
#define ENUM_QUOTE_ENTRY_REJECT_REASON_PARTIAL_EXEC_OF_QRS_ORDER_152 = 152
#define ENUM_QUOTE_ENTRY_REJECT_REASON_MATCHING_QUOTE_NOT_ALLOWED_IN_CURRENT_STATE_153 = 153
#define ENUM_QUOTE_ENTRY_REJECT_REASON_OUTSIDE_QUOTING_PERIOD_155 = 155
#define ENUM_QUOTE_ENTRY_REJECT_REASON_MATCH_PRICE_NOT_ON_PRICE_STEP_156 = 156
#define ENUM_QUOTE_ENTRY_REJECT_REASON_QUANTITY_LIMIT_EXCEEDS_TSL_161 = 161
#define ENUM_QUOTE_ENTRY_REJECT_REASON_INVALID_TRADING_SESSION_SUB_I_DFOR_INSTRUMENT_162 = 162
#define ENUM_QUOTE_ENTRY_REJECT_REASON_TOO_MANY_ORDERSAND_QUOTESIN_ORDER_BOOK_163 = 163
#define ENUM_QUOTE_ENTRY_REJECT_REASON_QUOTE_ENTRY_REJECT_REASON_MINIMUM_VALUE_65535 = 65535
#define ENUM_QUOTE_ENTRY_REJECT_REASON_QUOTE_ENTRY_REJECT_REASON_MINIMUM_VALUE_0 = 0

/*
 * Quote Entry Status Values
 */ 
#define ENUM_QUOTE_ENTRY_STATUS_ACCEPTED_0 = 0
#define ENUM_QUOTE_ENTRY_STATUS_REJECTED_5 = 5
#define ENUM_QUOTE_ENTRY_STATUS_REMOVEDAND_REJECTED_6 = 6
#define ENUM_QUOTE_ENTRY_STATUS_PENDING_10 = 10
#define ENUM_QUOTE_ENTRY_STATUS_QUOTE_ENTRY_STATUS_MINIMUM_VALUE_100 = 100
#define ENUM_QUOTE_ENTRY_STATUS_QUOTE_ENTRY_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Quote Event Liquidity Ind Values
 */ 
#define ENUM_QUOTE_EVENT_LIQUIDITY_IND_ADDED_LIQUIDITY_1 = 1
#define ENUM_QUOTE_EVENT_LIQUIDITY_IND_REMOVED_LIQUIDITY_2 = 2
#define ENUM_QUOTE_EVENT_LIQUIDITY_IND_AUCTION_4 = 4
#define ENUM_QUOTE_EVENT_LIQUIDITY_IND_QUOTE_EVENT_LIQUIDITY_IND_MINIMUM_VALUE_4 = 4
#define ENUM_QUOTE_EVENT_LIQUIDITY_IND_QUOTE_EVENT_LIQUIDITY_IND_MINIMUM_VALUE_1 = 1

/*
 * Quote Event Reason Values
 */ 
#define ENUM_QUOTE_EVENT_REASON_PENDINGCANCELLATIONEXECUTED_14 = 14
#define ENUM_QUOTE_EVENT_REASON_INVALIDPRICE_15 = 15
#define ENUM_QUOTE_EVENT_REASON_CROSSREJECTED_16 = 16
#define ENUM_QUOTE_EVENT_REASON_PLP_18 = 18
#define ENUM_QUOTE_EVENT_REASON_PRICENOT_TOPOF_BOOK_19 = 19
#define ENUM_QUOTE_EVENT_REASON_RANDOM_SELECTION_20 = 20
#define ENUM_QUOTE_EVENT_REASON_MANUAL_SELECTION_21 = 21
#define ENUM_QUOTE_EVENT_REASON_QUOTE_EVENT_REASON_MINIMUM_VALUE_21 = 21
#define ENUM_QUOTE_EVENT_REASON_QUOTE_EVENT_REASON_MINIMUM_VALUE_14 = 14

/*
 * Quote Event Side Values
 */ 
#define ENUM_QUOTE_EVENT_SIDE_BUY_1 = 1
#define ENUM_QUOTE_EVENT_SIDE_SELL_2 = 2
#define ENUM_QUOTE_EVENT_SIDE_QUOTE_EVENT_SIDE_MINIMUM_VALUE_2 = 2
#define ENUM_QUOTE_EVENT_SIDE_QUOTE_EVENT_SIDE_MINIMUM_VALUE_1 = 1

/*
 * Quote Event Type Values
 */ 
#define ENUM_QUOTE_EVENT_TYPE_MODIFIEDQUOTESIDE_2 = 2
#define ENUM_QUOTE_EVENT_TYPE_REMOVEDQUOTESIDE_3 = 3
#define ENUM_QUOTE_EVENT_TYPE_PARTIALLYFILLED_4 = 4
#define ENUM_QUOTE_EVENT_TYPE_FILLED_5 = 5
#define ENUM_QUOTE_EVENT_TYPE_QUOTE_EVENT_TYPE_MINIMUM_VALUE_5 = 5
#define ENUM_QUOTE_EVENT_TYPE_QUOTE_EVENT_TYPE_MINIMUM_VALUE_0 = 0

/*
 * Quote Request Reject Reason Values
 */ 
#define ENUM_QUOTE_REQUEST_REJECT_REASON_EXCHANGECLOSED_2 = 2
#define ENUM_QUOTE_REQUEST_REJECT_REASON_OTHER_99 = 99
#define ENUM_QUOTE_REQUEST_REJECT_REASON_REQUESTEDSIZETOOSMALL_100 = 100
#define ENUM_QUOTE_REQUEST_REJECT_REASON_REQUESTEDSIZETOOBIG_101 = 101
#define ENUM_QUOTE_REQUEST_REJECT_REASON_NOVALIDQUOTEFROMISSUER_102 = 102
#define ENUM_QUOTE_REQUEST_REJECT_REASON_SOLDOUT_103 = 103
#define ENUM_QUOTE_REQUEST_REJECT_REASON_TRADINGRESTRICTION_104 = 104
#define ENUM_QUOTE_REQUEST_REJECT_REASON_PENDINGREQUESTTIMEDOUT_105 = 105
#define ENUM_QUOTE_REQUEST_REJECT_REASON_QUOTE_REQUEST_REJECT_REASON_MINIMUM_VALUE_106 = 106
#define ENUM_QUOTE_REQUEST_REJECT_REASON_QUOTE_REQUEST_REJECT_REASON_MINIMUM_VALUE_2 = 2

/*
 * Quote Size Type Values
 */ 
#define ENUM_QUOTE_SIZE_TYPE_TOTAL_SIZE_1 = 1
#define ENUM_QUOTE_SIZE_TYPE_OPEN_SIZE_2 = 2
#define ENUM_QUOTE_SIZE_TYPE_QUOTE_SIZE_TYPE_MINIMUM_VALUE_2 = 2
#define ENUM_QUOTE_SIZE_TYPE_QUOTE_SIZE_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Quote Status Values
 */ 
#define ENUM_QUOTE_STATUS_REMOVED_6 = 6
#define ENUM_QUOTE_STATUS_EXPIRED_7 = 7
#define ENUM_QUOTE_STATUS_ACTIVE_16 = 16
#define ENUM_QUOTE_STATUS_QUOTE_STATUS_MINIMUM_VALUE_17 = 17
#define ENUM_QUOTE_STATUS_QUOTE_STATUS_MINIMUM_VALUE_6 = 6

/*
 * Quote Type Values
 */ 
#define ENUM_QUOTE_TYPE_TRADEABLE_1 = 1
#define ENUM_QUOTE_TYPE_TRADEABLE_MATCHING_101 = 101
#define ENUM_QUOTE_TYPE_TRADEABLE_PWT_102 = 102
#define ENUM_QUOTE_TYPE_SPECIAL_AUCTION_103 = 103
#define ENUM_QUOTE_TYPE_QUOTE_TYPE_MINIMUM_VALUE_103 = 103
#define ENUM_QUOTE_TYPE_QUOTE_TYPE_MINIMUM_VALUE_0 = 0

/*
 * Quoting Status Values
 */ 
#define ENUM_QUOTING_STATUS_OPEN_ACTIVE_1 = 1
#define ENUM_QUOTING_STATUS_OPEN_IDLE_2 = 2
#define ENUM_QUOTING_STATUS_CLOSED_INACTIVE_3 = 3
#define ENUM_QUOTING_STATUS_OPEN_NOT_RESPONDED_4 = 4
#define ENUM_QUOTING_STATUS_QUOTING_STATUS_MINIMUM_VALUE_4 = 4
#define ENUM_QUOTING_STATUS_QUOTING_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Ref Appl Id Values
 */ 
#define ENUM_REF_APPL_ID_TRADE_1 = 1
#define ENUM_REF_APPL_ID_NEWS_2 = 2
#define ENUM_REF_APPL_ID_SERVICEAVAILABILITY_3 = 3
#define ENUM_REF_APPL_ID_SESSIONDATA_4 = 4
#define ENUM_REF_APPL_ID_LISTENERDATA_5 = 5
#define ENUM_REF_APPL_ID_RISK_CONTROL_6 = 6
#define ENUM_REF_APPL_ID_TES_MAINTENANCE_7 = 7
#define ENUM_REF_APPL_ID_TES_TRADE_8 = 8
#define ENUM_REF_APPL_ID_SRQS_MAINTENANCE_9 = 9
#define ENUM_REF_APPL_ID_SERVICE_AVAILABILITY_MARKET_10 = 10
#define ENUM_REF_APPL_ID_SPECIALIST_DATA_11 = 11
#define ENUM_REF_APPL_ID_REF_APPL_ID_MINIMUM_VALUE_11 = 11
#define ENUM_REF_APPL_ID_REF_APPL_ID_MINIMUM_VALUE_0 = 0

/*
 * Refinancing Eligibility Indicator Values
 */ 
#define ENUM_REFINANCING_ELIGIBILITY_INDICATOR_NO_0 = 0
#define ENUM_REFINANCING_ELIGIBILITY_INDICATOR_YES_1 = 1
#define ENUM_REFINANCING_ELIGIBILITY_INDICATOR_REFINANCING_ELIGIBILITY_INDICATOR_MINIMUM_VALUE_1 = 1
#define ENUM_REFINANCING_ELIGIBILITY_INDICATOR_REFINANCING_ELIGIBILITY_INDICATOR_MINIMUM_VALUE_0 = 0

/*
 * Requesting Party Id Entering Firm Values
 */ 
#define ENUM_REQUESTING_PARTY_ID_ENTERING_FIRM_PARTICIPANT_1 = 1
#define ENUM_REQUESTING_PARTY_ID_ENTERING_FIRM_MARKET_SUPERVISION_2 = 2
#define ENUM_REQUESTING_PARTY_ID_ENTERING_FIRM_REQUESTING_PARTY_ID_ENTERING_FIRM_MINIMUM_VALUE_2 = 2
#define ENUM_REQUESTING_PARTY_ID_ENTERING_FIRM_REQUESTING_PARTY_ID_ENTERING_FIRM_MINIMUM_VALUE_1 = 1

/*
 * Requesting Party Id Executing System Values
 */ 
#define ENUM_REQUESTING_PARTY_ID_EXECUTING_SYSTEM_T72 = 2
#define ENUM_REQUESTING_PARTY_ID_EXECUTING_SYSTEM_REQUESTING_PARTY_ID_EXECUTING_SYSTEM_MINIMUM_VALUE_4294967294 = 4294967294
#define ENUM_REQUESTING_PARTY_ID_EXECUTING_SYSTEM_REQUESTING_PARTY_ID_EXECUTING_SYSTEM_MINIMUM_VALUE_0 = 0

/*
 * Respondent Type Values
 */ 
#define ENUM_RESPONDENT_TYPE_SPECIFIEDMARKETPARTICIPANTS_2 = 2
#define ENUM_RESPONDENT_TYPE_SPECIFIEDAND_SMART_RF_QSELECTEDPARTICIPANTS_100 = 100
#define ENUM_RESPONDENT_TYPE_SMART_RF_QSELECTEDPARTICIPANTS_101 = 101
#define ENUM_RESPONDENT_TYPE_RESPONDENT_TYPE_MINIMUM_VALUE_102 = 102
#define ENUM_RESPONDENT_TYPE_RESPONDENT_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Rfq Publish Indicator Values
 */ 
#define ENUM_RFQ_PUBLISH_INDICATOR_MARKET_DATA_1 = 1
#define ENUM_RFQ_PUBLISH_INDICATOR_DESIGNATED_SPONSOR_2 = 2
#define ENUM_RFQ_PUBLISH_INDICATOR_MARKET_DATAAND_DESIGNATED_SPONSOR_3 = 3
#define ENUM_RFQ_PUBLISH_INDICATOR_MARKET_MAKERAND_DESIGNATED_SPONSOR_4 = 4
#define ENUM_RFQ_PUBLISH_INDICATOR_MARKET_DATAAND_MARKET_MAKERAND_DESIGNATED_SPONSOR_5 = 5
#define ENUM_RFQ_PUBLISH_INDICATOR_SPECIALIST_6 = 6
#define ENUM_RFQ_PUBLISH_INDICATOR_RFQ_PUBLISH_INDICATOR_MINIMUM_VALUE_6 = 6
#define ENUM_RFQ_PUBLISH_INDICATOR_RFQ_PUBLISH_INDICATOR_MINIMUM_VALUE_1 = 1

/*
 * Rfq Requester Disclosure Instruction Values
 */ 
#define ENUM_RFQ_REQUESTER_DISCLOSURE_INSTRUCTION_NO_0 = 0
#define ENUM_RFQ_REQUESTER_DISCLOSURE_INSTRUCTION_YES_1 = 1
#define ENUM_RFQ_REQUESTER_DISCLOSURE_INSTRUCTION_RFQ_REQUESTER_DISCLOSURE_INSTRUCTION_MINIMUM_VALUE_1 = 1
#define ENUM_RFQ_REQUESTER_DISCLOSURE_INSTRUCTION_RFQ_REQUESTER_DISCLOSURE_INSTRUCTION_MINIMUM_VALUE_0 = 0

/*
 * Root Party Id Investment Decision Maker Qualifier Values
 */ 
#define ENUM_ROOT_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_ALGO_22 = 22
#define ENUM_ROOT_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_HUMAN_24 = 24
#define ENUM_ROOT_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_ROOT_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_MINIMUM_VALUE_24 = 24
#define ENUM_ROOT_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_ROOT_PARTY_ID_INVESTMENT_DECISION_MAKER_QUALIFIER_MINIMUM_VALUE_22 = 22

/*
 * Security Status Values
 */ 
#define ENUM_SECURITY_STATUS_KNOCKEDOUT_6 = 6
#define ENUM_SECURITY_STATUS_KNOCKOUTREVOKED_7 = 7
#define ENUM_SECURITY_STATUS_KNOCKEDOUTANDSUSPEND_12 = 12
#define ENUM_SECURITY_STATUS_SECURITY_STATUS_MINIMUM_VALUE_12 = 12
#define ENUM_SECURITY_STATUS_SECURITY_STATUS_MINIMUM_VALUE_6 = 6

/*
 * Security Trading Status Values
 */ 
#define ENUM_SECURITY_TRADING_STATUS_MARKET_IMBALANCE_BUY_7 = 7
#define ENUM_SECURITY_TRADING_STATUS_MARKET_IMBALANCE_SELL_8 = 8
#define ENUM_SECURITY_TRADING_STATUS_SECURITY_TRADING_STATUS_MINIMUM_VALUE_8 = 8
#define ENUM_SECURITY_TRADING_STATUS_SECURITY_TRADING_STATUS_MINIMUM_VALUE_7 = 7

/*
 * Selective Request For Quote Service Status Values
 */ 
#define ENUM_SELECTIVE_REQUEST_FOR_QUOTE_SERVICE_STATUS_UNAVAILABLE_0 = 0
#define ENUM_SELECTIVE_REQUEST_FOR_QUOTE_SERVICE_STATUS_AVAILABLE_1 = 1
#define ENUM_SELECTIVE_REQUEST_FOR_QUOTE_SERVICE_STATUS_SELECTIVE_REQUEST_FOR_QUOTE_SERVICE_STATUS_MINIMUM_VALUE_1 = 1
#define ENUM_SELECTIVE_REQUEST_FOR_QUOTE_SERVICE_STATUS_SELECTIVE_REQUEST_FOR_QUOTE_SERVICE_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Session Mode Values
 */ 
#define ENUM_SESSION_MODE_HF_1 = 1
#define ENUM_SESSION_MODE_LF_2 = 2
#define ENUM_SESSION_MODE_GUI_3 = 3
#define ENUM_SESSION_MODE_SESSION_MODE_MINIMUM_VALUE_3 = 3
#define ENUM_SESSION_MODE_SESSION_MODE_MINIMUM_VALUE_1 = 1

/*
 * Session Reject Reason Values
 */ 
#define ENUM_SESSION_REJECT_REASON_REQUIRED_TAG_MISSING_1 = 1
#define ENUM_SESSION_REJECT_REASON_VALUEISINCORRECT_5 = 5
#define ENUM_SESSION_REJECT_REASON_DECRYPTIONPROBLEM_7 = 7
#define ENUM_SESSION_REJECT_REASON_INVALID_MSG_ID_11 = 11
#define ENUM_SESSION_REJECT_REASON_INCORRECT_NUM_IN_GROUPCOUNT_16 = 16
#define ENUM_SESSION_REJECT_REASON_OTHER_99 = 99
#define ENUM_SESSION_REJECT_REASON_THROTTLE_LIMIT_EXCEEDED_100 = 100
#define ENUM_SESSION_REJECT_REASON_EXPOSURE_LIMIT_EXCEEDED_101 = 101
#define ENUM_SESSION_REJECT_REASON_SERVICE_TEMPORARILY_NOT_AVAILABLE_102 = 102
#define ENUM_SESSION_REJECT_REASON_SERVICE_NOT_AVAILABLE_103 = 103
#define ENUM_SESSION_REJECT_REASON_OUTBOUNDCONVERSIONERROR_105 = 105
#define ENUM_SESSION_REJECT_REASON_HEARTBEAT_VIOLATION_152 = 152
#define ENUM_SESSION_REJECT_REASON_INTERNALTECHNICALERROR_200 = 200
#define ENUM_SESSION_REJECT_REASON_VALIDATION_ERROR_210 = 210
#define ENUM_SESSION_REJECT_REASON_USER_ALREADY_LOGGED_IN_211 = 211
#define ENUM_SESSION_REJECT_REASON_GATEWAY_IS_STANDBY_216 = 216
#define ENUM_SESSION_REJECT_REASON_SESSION_LOGIN_LIMIT_REACHED_217 = 217
#define ENUM_SESSION_REJECT_REASON_USER_ENTITLEMENT_DATA_TIMEOUT_223 = 223
#define ENUM_SESSION_REJECT_REASON_PS_GATEWAY_SESSION_LIMIT_REACHED_224 = 224
#define ENUM_SESSION_REJECT_REASON_USER_LOGIN_LIMIT_REACHED_225 = 225
#define ENUM_SESSION_REJECT_REASON_OUTSTANDING_LOGINS_BU_LIMIT_REACHED_226 = 226
#define ENUM_SESSION_REJECT_REASON_OUTSTANDING_LOGINS_SESSION_LIMIT_REACHED_227 = 227
#define ENUM_SESSION_REJECT_REASON_ORDER_NOT_FOUND_10000 = 10000
#define ENUM_SESSION_REJECT_REASON_PRICE_NOT_REASONABLE_10001 = 10001
#define ENUM_SESSION_REJECT_REASON_CLIENT_ORDER_ID_NOT_UNIQUE_10002 = 10002
#define ENUM_SESSION_REJECT_REASON_QUOTE_ACTIVATION_IN_PROGRESS_10003 = 10003
#define ENUM_SESSION_REJECT_REASON_BU_BOOK_ORDER_LIMIT_EXCEEDED_10004 = 10004
#define ENUM_SESSION_REJECT_REASON_SESSION_BOOK_ORDER_LIMIT_EXCEEDED_10005 = 10005
#define ENUM_SESSION_REJECT_REASON_STOP_BID_PRICE_NOT_REASONABLE_10006 = 10006
#define ENUM_SESSION_REJECT_REASON_STOP_ASK_PRICE_NOT_REASONABLE_10007 = 10007
#define ENUM_SESSION_REJECT_REASON_ORDER_NOT_EXECUTABLE_WITHIN_VALIDITY_10008 = 10008
#define ENUM_SESSION_REJECT_REASON_INVALID_TRADING_RESTRICTION_FOR_INSTRUMENT_STATE_10009 = 10009
#define ENUM_SESSION_REJECT_REASON_TRANSACTION_NOT_ALLOWED_IN_CURRENT_STATE_10011 = 10011
#define ENUM_SESSION_REJECT_REASON_SESSION_REJECT_REASON_MINIMUM_VALUE_4294967294 = 4294967294
#define ENUM_SESSION_REJECT_REASON_SESSION_REJECT_REASON_MINIMUM_VALUE_0 = 0

/*
 * Session Status Values
 */ 
#define ENUM_SESSION_STATUS_ACTIVE_0 = 0
#define ENUM_SESSION_STATUS_LOGOUT_4 = 4
#define ENUM_SESSION_STATUS_SESSION_STATUS_MINIMUM_VALUE_4 = 4
#define ENUM_SESSION_STATUS_SESSION_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Session Sub Mode Values
 */ 
#define ENUM_SESSION_SUB_MODE_REGULARTRADINGSESSION_0 = 0
#define ENUM_SESSION_SUB_MODE_FI_XTRADINGSESSION_1 = 1
#define ENUM_SESSION_SUB_MODE_REGULAR_BACK_OFFICESESSION_2 = 2
#define ENUM_SESSION_SUB_MODE_SESSION_SUB_MODE_MINIMUM_VALUE_3 = 3
#define ENUM_SESSION_SUB_MODE_SESSION_SUB_MODE_MINIMUM_VALUE_0 = 0

/*
 * Side Values
 */ 
#define ENUM_SIDE_BUY_1 = 1
#define ENUM_SIDE_SELL_2 = 2
#define ENUM_SIDE_SIDE_MINIMUM_VALUE_2 = 2
#define ENUM_SIDE_SIDE_MINIMUM_VALUE_1 = 1

/*
 * Side Liquidity Ind Values
 */ 
#define ENUM_SIDE_LIQUIDITY_IND_ADDED_LIQUIDITY_1 = 1
#define ENUM_SIDE_LIQUIDITY_IND_REMOVED_LIQUIDITY_2 = 2
#define ENUM_SIDE_LIQUIDITY_IND_AUCTION_4 = 4
#define ENUM_SIDE_LIQUIDITY_IND_SIDE_LIQUIDITY_IND_MINIMUM_VALUE_4 = 4
#define ENUM_SIDE_LIQUIDITY_IND_SIDE_LIQUIDITY_IND_MINIMUM_VALUE_1 = 1

/*
 * Sold Out Indicator Values
 */ 
#define ENUM_SOLD_OUT_INDICATOR_REVERTSOLDOUT_0 = 0
#define ENUM_SOLD_OUT_INDICATOR_SOLDOUT_1 = 1
#define ENUM_SOLD_OUT_INDICATOR_SOLD_OUT_INDICATOR_MINIMUM_VALUE_1 = 1
#define ENUM_SOLD_OUT_INDICATOR_SOLD_OUT_INDICATOR_MINIMUM_VALUE_0 = 0

/*
 * Stop Px Indicator Values
 */ 
#define ENUM_STOP_PX_INDICATOR_DONOTOVERWRITE_0 = 0
#define ENUM_STOP_PX_INDICATOR_OVERWRITE_1 = 1
#define ENUM_STOP_PX_INDICATOR_STOP_PX_INDICATOR_MINIMUM_VALUE_1 = 1
#define ENUM_STOP_PX_INDICATOR_STOP_PX_INDICATOR_MINIMUM_VALUE_0 = 0

/*
 * T 7 Entry Service Rtm Status Values
 */ 
#define ENUM_T7_ENTRY_SERVICE_RTM_STATUS_UNAVAILABLE_0 = 0
#define ENUM_T7_ENTRY_SERVICE_RTM_STATUS_AVAILABLE_1 = 1
#define ENUM_T7_ENTRY_SERVICE_RTM_STATUS_T7_ENTRY_SERVICE_RTM_STATUS_MINIMUM_VALUE_1 = 1
#define ENUM_T7_ENTRY_SERVICE_RTM_STATUS_T7_ENTRY_SERVICE_RTM_STATUS_MINIMUM_VALUE_0 = 0

/*
 * T 7 Entry Service Status Values
 */ 
#define ENUM_T7_ENTRY_SERVICE_STATUS_UNAVAILABLE_0 = 0
#define ENUM_T7_ENTRY_SERVICE_STATUS_AVAILABLE_1 = 1
#define ENUM_T7_ENTRY_SERVICE_STATUS_T7_ENTRY_SERVICE_STATUS_MINIMUM_VALUE_1 = 1
#define ENUM_T7_ENTRY_SERVICE_STATUS_T7_ENTRY_SERVICE_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Time In Force Values
 */ 
#define ENUM_TIME_IN_FORCE_DAY_0 = 0
#define ENUM_TIME_IN_FORCE_GTC_1 = 1
#define ENUM_TIME_IN_FORCE_IOC_3 = 3
#define ENUM_TIME_IN_FORCE_FOK_4 = 4
#define ENUM_TIME_IN_FORCE_GTX_5 = 5
#define ENUM_TIME_IN_FORCE_GTD_6 = 6
#define ENUM_TIME_IN_FORCE_TIME_IN_FORCE_MINIMUM_VALUE_6 = 6
#define ENUM_TIME_IN_FORCE_TIME_IN_FORCE_MINIMUM_VALUE_0 = 0

/*
 * Trad Ses Event Values
 */ 
#define ENUM_TRAD_SES_EVENT_STARTOF_SERVICE_101 = 101
#define ENUM_TRAD_SES_EVENT_MARKET_RESET_102 = 102
#define ENUM_TRAD_SES_EVENT_ENDOF_RESTATEMENT_103 = 103
#define ENUM_TRAD_SES_EVENT_ENDOF_DAY_SERVICE_104 = 104
#define ENUM_TRAD_SES_EVENT_SERVICE_RESUMED_105 = 105
#define ENUM_TRAD_SES_EVENT_TRAD_SES_EVENT_MINIMUM_VALUE_105 = 105
#define ENUM_TRAD_SES_EVENT_TRAD_SES_EVENT_MINIMUM_VALUE_100 = 100

/*
 * Trad Ses Mode Values
 */ 
#define ENUM_TRAD_SES_MODE_TESTING_1 = 1
#define ENUM_TRAD_SES_MODE_SIMULATED_2 = 2
#define ENUM_TRAD_SES_MODE_PRODUCTION_3 = 3
#define ENUM_TRAD_SES_MODE_ACCEPTANCE_4 = 4
#define ENUM_TRAD_SES_MODE_DISASTER_RECOVERY_5 = 5
#define ENUM_TRAD_SES_MODE_TRAD_SES_MODE_MINIMUM_VALUE_5 = 5
#define ENUM_TRAD_SES_MODE_TRAD_SES_MODE_MINIMUM_VALUE_1 = 1

/*
 * Trade Alloc Status Values
 */ 
#define ENUM_TRADE_ALLOC_STATUS_PENDING_1 = 1
#define ENUM_TRADE_ALLOC_STATUS_APPROVED_2 = 2
#define ENUM_TRADE_ALLOC_STATUS_AUTO_APPROVED_3 = 3
#define ENUM_TRADE_ALLOC_STATUS_UPLOADED_4 = 4
#define ENUM_TRADE_ALLOC_STATUS_CANCELED_5 = 5
#define ENUM_TRADE_ALLOC_STATUS_TRADE_ALLOC_STATUS_MINIMUM_VALUE_5 = 5
#define ENUM_TRADE_ALLOC_STATUS_TRADE_ALLOC_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Trade Manager Status Values
 */ 
#define ENUM_TRADE_MANAGER_STATUS_UNAVAILABLE_0 = 0
#define ENUM_TRADE_MANAGER_STATUS_AVAILABLE_1 = 1
#define ENUM_TRADE_MANAGER_STATUS_TRADE_MANAGER_STATUS_MINIMUM_VALUE_1 = 1
#define ENUM_TRADE_MANAGER_STATUS_TRADE_MANAGER_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Trade Publish Indicator Values
 */ 
#define ENUM_TRADE_PUBLISH_INDICATOR_DEFERRED_PUBLICATION_2 = 2
#define ENUM_TRADE_PUBLISH_INDICATOR_PUBLISHED_3 = 3
#define ENUM_TRADE_PUBLISH_INDICATOR_TRADE_PUBLISH_INDICATOR_MINIMUM_VALUE_3 = 3
#define ENUM_TRADE_PUBLISH_INDICATOR_TRADE_PUBLISH_INDICATOR_MINIMUM_VALUE_0 = 0

/*
 * Trade Report Type Values
 */ 
#define ENUM_TRADE_REPORT_TYPE_SUBMIT_0 = 0
#define ENUM_TRADE_REPORT_TYPE_ACCEPT_2 = 2
#define ENUM_TRADE_REPORT_TYPE_DECLINE_3 = 3
#define ENUM_TRADE_REPORT_TYPE_NO_WAS_REPLACED_5 = 5
#define ENUM_TRADE_REPORT_TYPE_TRADE_REPORT_CANCEL_6 = 6
#define ENUM_TRADE_REPORT_TYPE_TRADE_BREAK_7 = 7
#define ENUM_TRADE_REPORT_TYPE_ALLEGED_NEW_11 = 11
#define ENUM_TRADE_REPORT_TYPE_ALLEGED_NO_WAS_13 = 13
#define ENUM_TRADE_REPORT_TYPE_TRADE_REPORT_TYPE_MINIMUM_VALUE_13 = 13
#define ENUM_TRADE_REPORT_TYPE_TRADE_REPORT_TYPE_MINIMUM_VALUE_0 = 0

/*
 * Trading Capacity Values
 */ 
#define ENUM_TRADING_CAPACITY_CUSTOMER_1 = 1
#define ENUM_TRADING_CAPACITY_BROKERDEALER_3 = 3
#define ENUM_TRADING_CAPACITY_PRINCIPAL_5 = 5
#define ENUM_TRADING_CAPACITY_MARKET_MAKER_6 = 6
#define ENUM_TRADING_CAPACITY_SYSTEMATIC_INTERNALISER_8 = 8
#define ENUM_TRADING_CAPACITY_RISKLESS_PRINCIPAL_9 = 9
#define ENUM_TRADING_CAPACITY_TRADING_CAPACITY_MINIMUM_VALUE_9 = 9
#define ENUM_TRADING_CAPACITY_TRADING_CAPACITY_MINIMUM_VALUE_1 = 1

/*
 * Trading Session Sub Id Values
 */ 
#define ENUM_TRADING_SESSION_SUB_ID_OPENINGAUCTION_2 = 2
#define ENUM_TRADING_SESSION_SUB_ID_CLOSINGAUCTION_4 = 4
#define ENUM_TRADING_SESSION_SUB_ID_INTRADAY_AUCTION_6 = 6
#define ENUM_TRADING_SESSION_SUB_ID_ANY_AUCTION_8 = 8
#define ENUM_TRADING_SESSION_SUB_ID_SPECIAL_AUCTION_105 = 105
#define ENUM_TRADING_SESSION_SUB_ID_TRADING_SESSION_SUB_ID_MINIMUM_VALUE_105 = 105
#define ENUM_TRADING_SESSION_SUB_ID_TRADING_SESSION_SUB_ID_MINIMUM_VALUE_1 = 1

/*
 * Transaction Delay Indicator Values
 */ 
#define ENUM_TRANSACTION_DELAY_INDICATOR_NOTDELAYED_0 = 0
#define ENUM_TRANSACTION_DELAY_INDICATOR_DELAYED_1 = 1
#define ENUM_TRANSACTION_DELAY_INDICATOR_TRANSACTION_DELAY_INDICATOR_MINIMUM_VALUE_1 = 1
#define ENUM_TRANSACTION_DELAY_INDICATOR_TRANSACTION_DELAY_INDICATOR_MINIMUM_VALUE_0 = 0

/*
 * Transfer Reason Values
 */ 
#define ENUM_TRANSFER_REASON_OWNER_1 = 1
#define ENUM_TRANSFER_REASON_CLEARER_2 = 2
#define ENUM_TRANSFER_REASON_TRANSFER_REASON_MINIMUM_VALUE_5 = 5
#define ENUM_TRANSFER_REASON_TRANSFER_REASON_MINIMUM_VALUE_1 = 1

/*
 * Trd Rpt Status Values
 */ 
#define ENUM_TRD_RPT_STATUS_ACCEPTED_0 = 0
#define ENUM_TRD_RPT_STATUS_REJECTED_1 = 1
#define ENUM_TRD_RPT_STATUS_CANCELLED_2 = 2
#define ENUM_TRD_RPT_STATUS_PENDING_NEW_4 = 4
#define ENUM_TRD_RPT_STATUS_TERMINATED_7 = 7
#define ENUM_TRD_RPT_STATUS_DEEMED_VERIFIED_9 = 9
#define ENUM_TRD_RPT_STATUS_TRD_RPT_STATUS_MINIMUM_VALUE_9 = 9
#define ENUM_TRD_RPT_STATUS_TRD_RPT_STATUS_MINIMUM_VALUE_0 = 0

/*
 * Trd Type Values
 */ 
#define ENUM_TRD_TYPE_OTC_54 = 54
#define ENUM_TRD_TYPE_LIS_1005 = 1005
#define ENUM_TRD_TYPE_ENLIGHT_1006 = 1006
#define ENUM_TRD_TYPE_TRD_TYPE_MINIMUM_VALUE_1011 = 1011
#define ENUM_TRD_TYPE_TRD_TYPE_MINIMUM_VALUE_1 = 1

/*
 * Triggered Values
 */ 
#define ENUM_TRIGGERED_NOTTRIGGERED_0 = 0
#define ENUM_TRIGGERED_TRIGGERED_STOP_1 = 1
#define ENUM_TRIGGERED_TRIGGERED_OCO_2 = 2
#define ENUM_TRIGGERED_TRIGGERED_MINIMUM_VALUE_2 = 2
#define ENUM_TRIGGERED_TRIGGERED_MINIMUM_VALUE_0 = 0

/*
 * User Status Values
 */ 
#define ENUM_USER_STATUS_USERFORCEDLOGOUT_7 = 7
#define ENUM_USER_STATUS_USERSTOPPED_10 = 10
#define ENUM_USER_STATUS_USERRELEASED_11 = 11
#define ENUM_USER_STATUS_USER_STATUS_MINIMUM_VALUE_11 = 11
#define ENUM_USER_STATUS_USER_STATUS_MINIMUM_VALUE_7 = 7

/*
 * Value Check Type Quantity Values
 */ 
#define ENUM_VALUE_CHECK_TYPE_QUANTITY_DONOTCHECK_0 = 0
#define ENUM_VALUE_CHECK_TYPE_QUANTITY_CHECK_1 = 1
#define ENUM_VALUE_CHECK_TYPE_QUANTITY_VALUE_CHECK_TYPE_QUANTITY_MINIMUM_VALUE_1 = 1
#define ENUM_VALUE_CHECK_TYPE_QUANTITY_VALUE_CHECK_TYPE_QUANTITY_MINIMUM_VALUE_0 = 0

/*
 * Value Check Type Value Values
 */ 
#define ENUM_VALUE_CHECK_TYPE_VALUE_DONOTCHECK_0 = 0
#define ENUM_VALUE_CHECK_TYPE_VALUE_CHECK_1 = 1
#define ENUM_VALUE_CHECK_TYPE_VALUE_VALUE_CHECK_TYPE_VALUE_MINIMUM_VALUE_1 = 1
#define ENUM_VALUE_CHECK_TYPE_VALUE_VALUE_CHECK_TYPE_VALUE_MINIMUM_VALUE_0 = 0


/*******************************************************************************
 * Structs
 *******************************************************************************/

/*
 * Structure: Affected Ord Grp
 */ 
typedef struct {
    uint64_t AffectedOrderId;
    uint64_t AffectedOrigClOrdId;
} AffectedOrdGrpT;

/*
 * Structure: Affected Order Requests Grp
 */ 
typedef struct {
    uint32_t AffectedOrderRequestId;
    char Pad4[4];
} AffectedOrderRequestsGrpT;

/*
 * Structure: Approve Tes Trade Request
 */ 
typedef struct {
    MessageHeaderInT MessageHeaderIn;
    RequestHeaderT RequestHeader;
    uint64_t PartyIdClientId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    uint64_t AllocQty;
    uint32_t PackageId;
    uint32_t AllocId;
    uint32_t TesExecId;
    int32_t MarketSegmentId;
    uint16_t TrdType;
    uint8_t TradingCapacity;
    uint8_t TradeReportType;
    uint8_t Side;
    uint8_t ValueCheckTypeValue;
    uint8_t ValueCheckTypeQuantity;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    uint8_t OrderOrigination;
    char TradeReportId[20];
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char Pad6[6];
} ApproveTesTradeRequestT;

/*
 * Structure: Best Quote Execution Report
 */ 
typedef struct {
    MessageHeaderOutT MessageHeaderOut;
    RbcHeaderMeT RbcHeaderMe;
    uint64_t ExecId;
    uint64_t QuoteMsgId;
    int64_t SecurityId;
    uint64_t QuoteEventPx;
    uint64_t QuoteEventQty;
    uint64_t ReservedSize;
    int32_t MarketSegmentId;
    uint32_t QuoteEventMatchId;
    int32_t QuoteEventExecId;
    uint8_t QuoteEventType;
    uint8_t QuoteEventSide;
    char Pad2[2];
} BestQuoteExecutionReportT;

/*
 * Structure: Best Quote Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    NrResponseHeaderMeT NrResponseHeaderMe;
    uint64_t QuoteId;
    uint64_t QuoteResponseId;
    int64_t SecurityId;
    uint64_t BidCxlSize;
    uint64_t OfferCxlSize;
    int32_t MarketSegmentId;
    char Pad4[4];
} BestQuoteResponseT;

/*
 * Structure: Broadcast Error Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    NotifHeaderT NotifHeader;
    uint32_t ApplIdStatus;
    uint32_t RefApplSubId;
    uint16_t VarTextLen;
    uint8_t RefApplId;
    uint8_t SessionStatus;
    char Pad4[4];
} BroadcastErrorNotificationT;

/*
 * Structure: Cross Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    uint64_t OrderQty;
    int32_t MarketSegmentId;
    char Pad4[4];
} CrossRequestT;

/*
 * Structure: Cross Request Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t ExecId;
} CrossRequestResponseT;

/*
 * Structure: Delete All Order Nr Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t MassActionReportId;
} DeleteAllOrderNrResponseT;

/*
 * Structure: Delete All Order Quote Event Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t MassActionReportId;
    int64_t SecurityId;
    int32_t MarketSegmentId;
    uint8_t MassActionReason;
    uint8_t ExecInst;
    char Pad2[2];
} DeleteAllOrderQuoteEventBroadcastT;

/*
 * Structure: Delete All Order Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    uint64_t Price;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    int32_t MarketSegmentId;
    uint32_t TargetPartyIdSessionId;
    uint32_t TargetPartyIdExecutingTrader;
    uint8_t Side;
    uint8_t OrderOrigination;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
} DeleteAllOrderRequestT;

/*
 * Structure: Delete All Quote Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t MassActionReportId;
    int64_t SecurityId;
    int32_t MarketSegmentId;
    uint32_t TargetPartyIdSessionId;
    uint32_t PartyIdEnteringTrader;
    uint32_t TargetPartyIdExecutingTrader;
    uint16_t NoNotAffectedSecurities;
    uint8_t MassActionReason;
    uint8_t PartyIdEnteringFirm;
    char TargetPartyIdDeskId[3];
    char Pad1[1];
} DeleteAllQuoteBroadcastT;

/*
 * Structure: Delete All Quote Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    int32_t MarketSegmentId;
    uint32_t TargetPartyIdSessionId;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    char Pad6[6];
} DeleteAllQuoteRequestT;

/*
 * Structure: Delete All Quote Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t MassActionReportId;
    uint16_t NoNotAffectedSecurities;
    char Pad6[6];
} DeleteAllQuoteResponseT;

/*
 * Structure: Delete Order Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint64_t QuoteId;
    uint32_t OrderIdSfx;
    int32_t MarketSegmentId;
    uint32_t PartyIdEnteringTrader;
    uint32_t PartyIdSessionId;
    uint16_t ExecRestatementReason;
    uint8_t PartyIdEnteringFirm;
    char OrdStatus;
    char ExecType;
    uint8_t Side;
    uint8_t OrderEventType;
    char FixClOrdId[20];
    char PartyEnteringFirm[5];
    char PartyEnteringTrader[6];
    char Pad2[2];
} DeleteOrderBroadcastT;

/*
 * Structure: Delete Order Nr Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint32_t OrderIdSfx;
    char OrdStatus;
    char ExecType;
    uint16_t ExecRestatementReason;
    uint8_t TransactionDelayIndicator;
    char Pad7[7];
} DeleteOrderNrResponseT;

/*
 * Structure: Delete Order Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint32_t OrderIdSfx;
    char OrdStatus;
    char ExecType;
    uint16_t ExecRestatementReason;
    uint8_t TransactionDelayIndicator;
    char Pad7[7];
} DeleteOrderResponseT;

/*
 * Structure: Delete Order Single Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    int32_t MarketSegmentId;
    uint32_t TargetPartyIdSessionId;
    uint8_t OrderOrigination;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    char FixClOrdId[20];
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char Pad6[6];
} DeleteOrderSingleRequestT;

/*
 * Structure: Delete Tes Trade Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint32_t PackageId;
    int32_t MarketSegmentId;
    uint32_t TesExecId;
    uint16_t TrdType;
    uint8_t TradeReportType;
    char TradeReportId[20];
    char Pad5[5];
} DeleteTesTradeRequestT;

/*
 * Structure: Enrichment Rules Grp
 */ 
typedef struct {
    uint16_t EnrichmentRuleId;
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char Pad6[6];
} EnrichmentRulesGrpT;

/*
 * Structure: Enter Best Quote Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t QuoteId;
    int64_t SecurityId;
    uint64_t BidPx;
    uint64_t BidSize;
    uint64_t ReservedBidSize;
    uint64_t OfferPx;
    uint64_t OfferSize;
    uint64_t ReservedOfferSize;
    uint64_t PegOffsetValueBidPx;
    uint64_t PegOffsetValueOfferPx;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    int32_t MarketSegmentId;
    uint16_t EnrichmentRuleId;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t ValueCheckTypeQuantity;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    char Pad6[6];
} EnterBestQuoteRequestT;

/*
 * Structure: Enter Tes Trade Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    uint64_t LastPx;
    uint64_t TransBkdTime;
    uint64_t SettlCurrFxRate;
    int32_t MarketSegmentId;
    uint32_t SettlDate;
    uint16_t TrdType;
    uint8_t TradeReportType;
    uint8_t NoSideAllocs;
    char TradeReportText[20];
    char TradeReportId[20];
    char Pad4[4];
} EnterTesTradeRequestT;

/*
 * Structure: Extended Deletion Report
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t TrdRegTsEntryTime;
    uint64_t Price;
    uint64_t LeavesQty;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint64_t OrderQty;
    uint64_t DisplayQty;
    uint64_t DisplayLowQty;
    uint64_t DisplayHighQty;
    uint64_t StopPx;
    uint64_t VolumeDiscoveryPrice;
    uint64_t PegOffsetValueAbs;
    uint64_t PegOffsetValuePct;
    uint64_t QuoteId;
    int32_t MarketSegmentId;
    uint32_t OrderIdSfx;
    uint32_t ExpireDate;
    uint32_t MatchInstCrossId;
    uint32_t PartyIdExecutingUnit;
    uint32_t PartyIdSessionId;
    uint32_t PartyIdExecutingTrader;
    uint32_t PartyIdEnteringTrader;
    uint16_t ExecRestatementReason;
    char OrdStatus;
    char ExecType;
    uint8_t Side;
    uint8_t OrdType;
    uint8_t TradingCapacity;
    uint8_t TimeInForce;
    uint8_t ExecInst;
    uint8_t TradingSessionSubId;
    uint8_t ApplSeqIndicator;
    uint8_t ExDestinationType;
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char PartyEnteringFirm[5];
    char PartyEnteringTrader[6];
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FixClOrdId[20];
    uint8_t Triggered;
    char Pad1[1];
} ExtendedDeletionReportT;

/*
 * Structure: Fills Grp
 */ 
typedef struct {
    uint64_t FillPx;
    uint64_t FillQty;
    uint32_t FillMatchId;
    int32_t FillExecId;
    uint8_t FillLiquidityInd;
    char Pad7[7];
} FillsGrpT;

/*
 * Structure: Forced Logout Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NotifHeader[0];
    uint16_t VarTextLen;
    char Pad6[6];
} ForcedLogoutNotificationT;

/*
 * Structure: Forced User Logout Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NotifHeader[0];
    uint8_t UserStatus;
    char Pad3[3];
    uint32_t Username;
    uint16_t VarTextLen;
    char Pad6[6];
} ForcedUserLogoutNotificationT;

/*
 * Structure: Heartbeat
 */ 
typedef struct {
    char MessageHeaderIn[0];
} HeartbeatT;

/*
 * Structure: Heartbeat Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NotifHeader[0];
} HeartbeatNotificationT;

/*
 * Structure: Inquire Enrichment Rule Id List Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    char LastEntityProcessed[16];
} InquireEnrichmentRuleIdListRequestT;

/*
 * Structure: Inquire Enrichment Rule Id List Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    ResponseHeaderT ResponseHeader;
    char LastEntityProcessed[16];
    uint16_t NoEnrichmentRules;
    char Pad6[6];
} InquireEnrichmentRuleIdListResponseT;

/*
 * Structure: Inquire Session List Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
} InquireSessionListRequestT;

/*
 * Structure: Inquire Session List Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
    uint16_t NoSessions;
    char Pad6[6];
} InquireSessionListResponseT;

/*
 * Structure: Inquire User Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    char LastEntityProcessed[16];
} InquireUserRequestT;

/*
 * Structure: Inquire User Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
    char LastEntityProcessed[16];
    uint16_t NoPartyDetails;
    char Pad6[6];
} InquireUserResponseT;

/*
 * Structure: Issuer Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    int64_t SecurityId;
    uint64_t TransactTime;
    uint64_t LastPx;
    uint64_t PotentialExecVolume;
    uint64_t LastQty;
    uint64_t ImbalanceQty;
    int32_t MarketSegmentId;
    uint32_t PartyIdSessionId;
    uint8_t SecurityTradingStatus;
    char Pad7[7];
} IssuerNotificationT;

/*
 * Structure: Issuer Security State Change Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    uint64_t TransactTime;
    int32_t MarketSegmentId;
    uint8_t NoEvents;
    uint8_t SecurityStatus;
    uint8_t SoldOutIndicator;
    char Pad1[1];
} IssuerSecurityStateChangeRequestT;

/*
 * Structure: Issuer Security State Change Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t SecurityStatusReportId;
} IssuerSecurityStateChangeResponseT;

/*
 * Structure: Legal Notification Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    RbcHeaderT RbcHeader;
    uint64_t TransactTime;
    uint16_t VarTextLen;
    uint8_t UserStatus;
    char Pad5[5];
} LegalNotificationBroadcastT;

/*
 * Structure: Logon Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint32_t HeartBtInt;
    uint32_t PartyIdSessionId;
    char DefaultCstmApplVerId[30];
    char Password[32];
    char ApplUsageOrders;
    char ApplUsageQuotes;
    char OrderRoutingIndicator;
    char FixEngineName[30];
    char FixEngineVersion[30];
    char FixEngineVendor[30];
    char ApplicationSystemName[30];
    char ApplicationSystemVersion[30];
    char ApplicationSystemVendor[30];
    char Pad3[3];
} LogonRequestT;

/*
 * Structure: Logon Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
    int64_t ThrottleTimeInterval;
    uint32_t ThrottleNoMsgs;
    uint32_t ThrottleDisconnectLimit;
    uint32_t HeartBtInt;
    uint32_t SessionInstanceId;
    uint16_t MarketId;
    uint8_t TradSesMode;
    char DefaultCstmApplVerId[30];
    char DefaultCstmApplVerSubId[5];
    char Pad2[2];
} LogonResponseT;

/*
 * Structure: Logout Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
} LogoutRequestT;

/*
 * Structure: Logout Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
} LogoutResponseT;

/*
 * Structure: Mass Quote Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t QuoteId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    int32_t MarketSegmentId;
    uint32_t MatchInstCrossId;
    uint16_t EnrichmentRuleId;
    uint8_t PriceValidityCheckType;
    uint8_t ValueCheckTypeValue;
    uint8_t ValueCheckTypeQuantity;
    uint8_t QuoteSizeType;
    uint8_t QuoteType;
    uint8_t TradingCapacity;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t NoQuoteEntries;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    char Pad4[4];
} MassQuoteRequestT;

/*
 * Structure: Mass Quote Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t QuoteId;
    uint64_t QuoteResponseId;
    int32_t MarketSegmentId;
    uint8_t NoQuoteSideEntries;
    char Pad3[3];
} MassQuoteResponseT;

/*
 * Structure: Message Header In
 */ 
typedef struct {
    uint32_t BodyLen;
    uint16_t TemplateId;
    char NetworkMsgId[8];
    char Pad2[2];
} MessageHeaderInT;

/*
 * Structure: Message Header Out
 */ 
typedef struct {
    uint32_t BodyLen;
    uint16_t TemplateId;
    char Pad2[2];
} MessageHeaderOutT;

/*
 * Structure: Modify Order Nr Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t StopPx;
    uint64_t LeavesQty;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint64_t DisplayQty;
    uint32_t OrderIdSfx;
    char OrdStatus;
    char ExecType;
    uint16_t ExecRestatementReason;
    uint8_t CrossedIndicator;
    uint8_t Triggered;
    uint8_t TransactionDelayIndicator;
    char Pad5[5];
} ModifyOrderNrResponseT;

/*
 * Structure: Modify Order Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t StopPx;
    uint64_t LeavesQty;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint64_t DisplayQty;
    uint64_t TrdRegTsTimePriority;
    uint32_t OrderIdSfx;
    char OrdStatus;
    char ExecType;
    uint16_t ExecRestatementReason;
    uint8_t CrossedIndicator;
    uint8_t Triggered;
    uint8_t TransactionDelayIndicator;
    char Pad5[5];
} ModifyOrderResponseT;

/*
 * Structure: Modify Order Single Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t Price;
    uint64_t OrderQty;
    uint64_t DisplayQty;
    uint64_t DisplayLowQty;
    uint64_t DisplayHighQty;
    uint64_t StopPx;
    uint64_t VolumeDiscoveryPrice;
    uint64_t PegOffsetValueAbs;
    uint64_t PegOffsetValuePct;
    uint64_t PartyIdClientId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    uint32_t ExpireDate;
    int32_t MarketSegmentId;
    uint32_t MatchInstCrossId;
    uint32_t TargetPartyIdSessionId;
    uint8_t ApplSeqIndicator;
    uint8_t Side;
    uint8_t OrdType;
    uint8_t PriceValidityCheckType;
    uint8_t ValueCheckTypeValue;
    uint8_t ValueCheckTypeQuantity;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t TimeInForce;
    uint8_t ExecInst;
    uint8_t TradingSessionSubId;
    uint8_t StopPxIndicator;
    uint8_t TradingCapacity;
    uint8_t ExDestinationType;
    uint8_t OrderOrigination;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    uint8_t OwnershipIndicator;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char FixClOrdId[20];
} ModifyOrderSingleRequestT;

/*
 * Structure: Modify Order Single Short Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t Price;
    uint64_t OrderQty;
    uint64_t PartyIdClientId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    uint32_t MatchInstCrossId;
    uint16_t EnrichmentRuleId;
    uint8_t Side;
    uint8_t PriceValidityCheckType;
    uint8_t ValueCheckTypeValue;
    uint8_t ValueCheckTypeQuantity;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t TimeInForce;
    uint8_t ApplSeqIndicator;
    uint8_t ExecInst;
    uint8_t TradingCapacity;
    uint8_t ExDestinationType;
    uint8_t OrderOrigination;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    char Pad5[5];
} ModifyOrderSingleShortRequestT;

/*
 * Structure: Modify Tes Trade Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t LastPx;
    uint64_t TransBkdTime;
    int32_t MarketSegmentId;
    uint32_t PackageId;
    uint32_t TesExecId;
    uint32_t SettlDate;
    uint16_t TrdType;
    uint8_t TradeReportType;
    uint8_t NoSideAllocs;
    char TradeReportText[20];
    char TradeReportId[20];
    char Pad4[4];
} ModifyTesTradeRequestT;

/*
 * Structure: New Order Nr Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint32_t OrderIdSfx;
    char OrdStatus;
    char ExecType;
    uint16_t ExecRestatementReason;
    uint8_t CrossedIndicator;
    uint8_t Triggered;
    uint8_t TransactionDelayIndicator;
    char Pad5[5];
} NewOrderNrResponseT;

/*
 * Structure: New Order Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t TrdRegTsEntryTime;
    uint64_t TrdRegTsTimePriority;
    uint32_t OrderIdSfx;
    char OrdStatus;
    char ExecType;
    uint16_t ExecRestatementReason;
    uint8_t CrossedIndicator;
    uint8_t Triggered;
    uint8_t TransactionDelayIndicator;
    char Pad5[5];
} NewOrderResponseT;

/*
 * Structure: New Order Single Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t Price;
    uint64_t OrderQty;
    uint64_t DisplayQty;
    uint64_t DisplayLowQty;
    uint64_t DisplayHighQty;
    uint64_t StopPx;
    uint64_t VolumeDiscoveryPrice;
    uint64_t PegOffsetValueAbs;
    uint64_t PegOffsetValuePct;
    uint64_t ClOrdId;
    int64_t SecurityId;
    uint64_t PartyIdClientId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    uint64_t QuoteId;
    uint32_t ExpireDate;
    int32_t MarketSegmentId;
    uint32_t TargetPartyIdSessionId;
    uint32_t MatchInstCrossId;
    uint8_t ApplSeqIndicator;
    uint8_t Side;
    uint8_t OrdType;
    uint8_t PriceValidityCheckType;
    uint8_t ValueCheckTypeValue;
    uint8_t ValueCheckTypeQuantity;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t TimeInForce;
    uint8_t ExecInst;
    uint8_t TradingSessionSubId;
    uint8_t TradingCapacity;
    uint8_t ExDestinationType;
    uint8_t OrderOrigination;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char FixClOrdId[20];
    char Pad2[2];
} NewOrderSingleRequestT;

/*
 * Structure: New Order Single Short Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    uint64_t Price;
    uint64_t OrderQty;
    uint64_t ClOrdId;
    uint64_t PartyIdClientId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    uint32_t MatchInstCrossId;
    uint16_t EnrichmentRuleId;
    uint8_t Side;
    uint8_t ApplSeqIndicator;
    uint8_t PriceValidityCheckType;
    uint8_t ValueCheckTypeValue;
    uint8_t ValueCheckTypeQuantity;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t TimeInForce;
    uint8_t ExecInst;
    uint8_t TradingCapacity;
    uint8_t ExDestinationType;
    uint8_t OrderOrigination;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    char Pad5[5];
} NewOrderSingleShortRequestT;

/*
 * Structure: News Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t OrigTime;
    uint16_t VarTextLen;
    char Headline[256];
    char Pad6[6];
} NewsBroadcastT;

/*
 * Structure: Not Affected Orders Grp
 */ 
typedef struct {
    uint64_t NotAffectedOrderId;
    uint64_t NotAffOrigClOrdId;
} NotAffectedOrdersGrpT;

/*
 * Structure: Not Affected Securities Grp
 */ 
typedef struct {
    uint64_t NotAffectedSecurityId;
} NotAffectedSecuritiesGrpT;

/*
 * Structure: Notif Header
 */ 
typedef struct {
    uint64_t SendingTime;
} NotifHeaderT;

/*
 * Structure: Nr Response Header Me
 */ 
typedef struct {
    uint64_t RequestTime;
    uint64_t TrdRegTsTimeIn;
    uint64_t TrdRegTsTimeOut;
    uint64_t ResponseIn;
    uint64_t SendingTime;
    uint32_t MsgSeqNum;
    uint8_t LastFragment;
    char Pad3[3];
} NrResponseHeaderMeT;

/*
 * Structure: Nrbc Header
 */ 
typedef struct {
    uint64_t SendingTime;
    uint32_t ApplSubId;
    uint8_t ApplId;
    uint8_t LastFragment;
    char Pad2[2];
} NrbcHeaderT;

/*
 * Structure: Order Book Item Grp
 */ 
typedef struct {
    uint64_t BestBidPx;
    uint64_t BestBidSize;
    uint64_t BestOfferPx;
    uint64_t BestOfferSize;
    uint8_t MdBookType;
    uint8_t MdSubBookType;
    char Pad6[6];
} OrderBookItemGrpT;

/*
 * Structure: Order Exec Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t LeavesQty;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint64_t DisplayQty;
    int32_t MarketSegmentId;
    uint32_t OrderIdSfx;
    uint16_t ExecRestatementReason;
    uint8_t Side;
    char OrdStatus;
    char ExecType;
    uint8_t OrderEventType;
    uint8_t MatchType;
    uint8_t Triggered;
    uint8_t CrossedIndicator;
    char FixClOrdId[20];
    uint8_t NoFills;
    char Pad2[2];
} OrderExecNotificationT;

/*
 * Structure: Order Exec Report Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t TrdRegTsEntryTime;
    uint64_t TrdRegTsTimePriority;
    uint64_t Price;
    uint64_t LeavesQty;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint64_t OrderQty;
    uint64_t DisplayQty;
    uint64_t DisplayLowQty;
    uint64_t DisplayHighQty;
    uint64_t StopPx;
    uint64_t VolumeDiscoveryPrice;
    uint64_t PegOffsetValueAbs;
    uint64_t PegOffsetValuePct;
    uint64_t QuoteId;
    int32_t MarketSegmentId;
    uint32_t OrderIdSfx;
    uint32_t ExpireDate;
    uint32_t MatchInstCrossId;
    uint32_t PartyIdExecutingUnit;
    uint32_t PartyIdSessionId;
    uint32_t PartyIdExecutingTrader;
    uint32_t PartyIdEnteringTrader;
    uint16_t ExecRestatementReason;
    uint8_t PartyIdEnteringFirm;
    char OrdStatus;
    char ExecType;
    uint8_t OrderEventType;
    uint8_t MatchType;
    uint8_t Side;
    uint8_t OrdType;
    uint8_t TradingCapacity;
    uint8_t TimeInForce;
    uint8_t ExecInst;
    uint8_t TradingSessionSubId;
    uint8_t ApplSeqIndicator;
    uint8_t ExDestinationType;
    char PartyEnteringFirm[5];
    char PartyEnteringTrader[6];
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char FixClOrdId[20];
    uint8_t NoFills;
    uint8_t Triggered;
    uint8_t CrossedIndicator;
    char Pad4[4];
} OrderExecReportBroadcastT;

/*
 * Structure: Order Exec Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t TrdRegTsEntryTime;
    uint64_t TrdRegTsTimePriority;
    uint64_t LeavesQty;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint64_t DisplayQty;
    int32_t MarketSegmentId;
    uint32_t OrderIdSfx;
    uint16_t ExecRestatementReason;
    uint8_t Side;
    char OrdStatus;
    char ExecType;
    uint8_t MatchType;
    uint8_t Triggered;
    uint8_t CrossedIndicator;
    uint8_t TransactionDelayIndicator;
    uint8_t NoFills;
    char Pad6[6];
} OrderExecResponseT;

/*
 * Structure: Party Action Report
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    uint32_t TradeDate;
    uint32_t RequestingPartyIdExecutingTrader;
    uint32_t PartyIdExecutingUnit;
    uint32_t PartyIdExecutingTrader;
    uint32_t RequestingPartyIdExecutingSystem;
    uint16_t MarketId;
    uint8_t PartyActionType;
    uint8_t RequestingPartyIdEnteringFirm;
} PartyActionReportT;

/*
 * Structure: Party Details Grp
 */ 
typedef struct {
    uint32_t PartyDetailIdExecutingTrader;
    char PartyDetailExecutingTrader[6];
    uint8_t PartyDetailRoleQualifier;
    uint8_t PartyDetailStatus;
    char PartyDetailDeskId[3];
    char Pad1[1];
} PartyDetailsGrpT;

/*
 * Structure: Party Entitlements Update Report
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    uint32_t TradeDate;
    uint32_t PartyDetailIdExecutingUnit;
    uint32_t RequestingPartyIdExecutingSystem;
    uint16_t MarketId;
    char ListUpdateAction;
    char RequestingPartyEnteringFirm[9];
    char RequestingPartyClearingFirm[9];
    uint8_t PartyDetailStatus;
    char Pad6[6];
} PartyEntitlementsUpdateReportT;

/*
 * Structure: Quote Activation Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t MassActionReportId;
    int32_t MarketSegmentId;
    uint32_t PartyIdEnteringTrader;
    uint16_t NoNotAffectedSecurities;
    uint8_t PartyIdEnteringFirm;
    uint8_t MassActionType;
    uint8_t MassActionReason;
    char Pad3[3];
} QuoteActivationNotificationT;

/*
 * Structure: Quote Activation Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    int32_t MarketSegmentId;
    uint32_t TargetPartyIdSessionId;
    uint8_t MassActionType;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t ExecutingTraderQualifier;
    char Pad5[5];
} QuoteActivationRequestT;

/*
 * Structure: Quote Activation Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t MassActionReportId;
    uint16_t NoNotAffectedSecurities;
    char Pad6[6];
} QuoteActivationResponseT;

/*
 * Structure: Quote Entry Ack Grp
 */ 
typedef struct {
    int64_t SecurityId;
    uint64_t CxlSize;
    uint32_t QuoteEntryRejectReason;
    uint8_t QuoteEntryStatus;
    uint8_t Side;
    char Pad2[2];
} QuoteEntryAckGrpT;

/*
 * Structure: Quote Entry Grp
 */ 
typedef struct {
    int64_t SecurityId;
    uint64_t BidPx;
    uint64_t BidSize;
    uint64_t OfferPx;
    uint64_t OfferSize;
} QuoteEntryGrpT;

/*
 * Structure: Quote Event Grp
 */ 
typedef struct {
    int64_t SecurityId;
    uint64_t QuoteEventPx;
    uint64_t QuoteEventQty;
    uint64_t QuoteMsgId;
    uint32_t QuoteEventMatchId;
    int32_t QuoteEventExecId;
    uint8_t QuoteEventType;
    uint8_t QuoteEventSide;
    uint8_t QuoteEventLiquidityInd;
    uint8_t QuoteEventReason;
    char Pad4[4];
} QuoteEventGrpT;

/*
 * Structure: Quote Execution Report
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t ExecId;
    int32_t MarketSegmentId;
    uint8_t NoQuoteEvents;
    char Pad3[3];
} QuoteExecutionReportT;

/*
 * Structure: Rbc Header
 */ 
typedef struct {
    uint64_t SendingTime;
    uint64_t ApplSeqNum;
    uint32_t ApplSubId;
    uint16_t PartitionId;
    uint8_t ApplResendFlag;
    uint8_t ApplId;
    uint8_t LastFragment;
    char Pad7[7];
} RbcHeaderT;

/*
 * Structure: Rbc Header Me
 */ 
typedef struct {
    uint64_t TrdRegTsTimeOut;
    uint64_t NotificationIn;
    uint64_t SendingTime;
    uint32_t ApplSubId;
    uint16_t PartitionId;
    char ApplMsgId[16];
    uint8_t ApplId;
    uint8_t ApplResendFlag;
    uint8_t LastFragment;
    char Pad7[7];
} RbcHeaderMeT;

/*
 * Structure: Reject
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint32_t SessionRejectReason;
    uint16_t VarTextLen;
    uint8_t SessionStatus;
    char Pad1[1];
} RejectT;

/*
 * Structure: Request Header
 */ 
typedef struct {
    uint32_t MsgSeqNum;
    uint32_t SenderSubId;
} RequestHeaderT;

/*
 * Structure: Response Header
 */ 
typedef struct {
    uint64_t RequestTime;
    uint64_t SendingTime;
    uint32_t MsgSeqNum;
    char Pad4[4];
} ResponseHeaderT;

/*
 * Structure: Response Header Me
 */ 
typedef struct {
    uint64_t RequestTime;
    uint64_t TrdRegTsTimeIn;
    uint64_t TrdRegTsTimeOut;
    uint64_t ResponseIn;
    uint64_t SendingTime;
    uint32_t MsgSeqNum;
    uint16_t PartitionId;
    uint8_t ApplId;
    char ApplMsgId[16];
    uint8_t LastFragment;
} ResponseHeaderMeT;

/*
 * Structure: Retransmit Me Message Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint32_t SubscriptionScope;
    uint16_t PartitionId;
    uint8_t RefApplId;
    char ApplBegMsgId[16];
    char ApplEndMsgId[16];
    char Pad1[1];
} RetransmitMeMessageRequestT;

/*
 * Structure: Retransmit Me Message Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
    uint16_t ApplTotalMessageCount;
    char ApplEndMsgId[16];
    char RefApplLastMsgId[16];
    char Pad6[6];
} RetransmitMeMessageResponseT;

/*
 * Structure: Retransmit Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t ApplBegSeqNum;
    uint64_t ApplEndSeqNum;
    uint16_t PartitionId;
    uint8_t RefApplId;
    char Pad5[5];
} RetransmitRequestT;

/*
 * Structure: Retransmit Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
    uint64_t ApplEndSeqNum;
    uint64_t RefApplLastSeqNum;
    uint16_t ApplTotalMessageCount;
    char Pad6[6];
} RetransmitResponseT;

/*
 * Structure: Rfq Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t OrderQty;
    int32_t MarketSegmentId;
    uint8_t Side;
    char PartyExecutingFirm[5];
    char Pad6[6];
} RfqBroadcastT;

/*
 * Structure: Rfq Reject Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t QuoteId;
    int32_t MarketSegmentId;
    uint8_t QuoteRequestRejectReason;
    char PartyExecutingFirm[5];
    char Pad6[6];
} RfqRejectNotificationT;

/*
 * Structure: Rfq Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    uint64_t OrderQty;
    uint64_t QuoteId;
    int32_t MarketSegmentId;
    uint8_t RfqPublishIndicator;
    uint8_t RfqRequesterDisclosureInstruction;
    uint8_t Side;
    char Pad1[1];
} RfqRequestT;

/*
 * Structure: Rfq Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t ExecId;
} RfqResponseT;

/*
 * Structure: Rfq Specialist Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t OrderQty;
    uint64_t QuoteId;
    int32_t MarketSegmentId;
    uint8_t Side;
    char PartyExecutingFirm[5];
    char Pad6[6];
} RfqSpecialistBroadcastT;

/*
 * Structure: Security Status Event Grp
 */ 
typedef struct {
    uint64_t EventPx;
    uint32_t EventDate;
    uint8_t EventType;
    char Pad3[3];
} SecurityStatusEventGrpT;

/*
 * Structure: Service Availability Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    NrbcHeaderT NrbcHeader;
    uint32_t MatchingEngineTradeDate;
    uint32_t TradeManagerTradeDate;
    uint32_t ApplSeqTradeDate;
    uint32_t T7EntryServiceTradeDate;
    uint32_t T7EntryServiceRtmTradeDate;
    uint16_t PartitionId;
    uint8_t MatchingEngineStatus;
    uint8_t TradeManagerStatus;
    uint8_t ApplSeqStatus;
    uint8_t T7EntryServiceStatus;
    uint8_t T7EntryServiceRtmStatus;
    char Pad5[5];
} ServiceAvailabilityBroadcastT;

/*
 * Structure: Service Availability Market Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrbcHeader[0];
    uint32_t SelectiveRequestForQuoteServiceTradeDate;
    uint8_t SelectiveRequestForQuoteServiceStatus;
    char Pad3[3];
} ServiceAvailabilityMarketBroadcastT;

/*
 * Structure: Sessions Grp
 */ 
typedef struct {
    uint32_t PartyIdSessionId;
    uint8_t SessionMode;
    uint8_t SessionSubMode;
    char Pad2[2];
} SessionsGrpT;

/*
 * Structure: Side Alloc Grp
 */ 
typedef struct {
    uint64_t AllocQty;
    uint32_t IndividualAllocId;
    uint32_t TesEnrichmentRuleId;
    uint8_t Side;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char Pad4[4];
} SideAllocGrpT;

/*
 * Structure: Side Alloc Grp Bc
 */ 
typedef struct {
    uint64_t AllocQty;
    uint32_t IndividualAllocId;
    uint32_t TesEnrichmentRuleId;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    uint8_t Side;
    uint8_t TradeAllocStatus;
    char Pad3[3];
} SideAllocGrpBcT;

/*
 * Structure: Single Quote Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t QuoteId;
    int64_t SecurityId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    uint64_t BidPx;
    uint64_t BidSize;
    uint64_t OfferPx;
    uint64_t OfferSize;
    uint64_t SettlCurrFxRate;
    int32_t MarketSegmentId;
    uint32_t MatchInstCrossId;
    uint8_t PriceValidityCheckType;
    uint8_t ValueCheckTypeValue;
    uint8_t ValueCheckTypeQuantity;
    uint8_t QuoteSizeType;
    uint8_t QuoteType;
    uint8_t TradingCapacity;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t ExecutingTraderQualifier;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char Pad7[7];
} SingleQuoteRequestT;

/*
 * Structure: Specialist Instrument Event Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    int64_t SecurityId;
    uint64_t TransactTime;
    int32_t MarketSegmentId;
    uint8_t EventType;
    char Pad3[3];
} SpecialistInstrumentEventNotificationT;

/*
 * Structure: Specialist Order Book Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t TrdRegTsEntryTime;
    uint64_t TrdRegTsTimePriority;
    uint64_t Price;
    uint64_t LeavesQty;
    uint64_t CumQty;
    uint64_t CxlQty;
    uint64_t OrderQty;
    uint64_t StopPx;
    uint64_t QuoteId;
    int32_t MarketSegmentId;
    uint32_t OrderIdSfx;
    uint32_t ExpireDate;
    uint32_t PartyIdExecutingUnit;
    uint32_t PartyIdSessionId;
    uint32_t PartyIdExecutingTrader;
    uint32_t PartyIdEnteringTrader;
    uint8_t NoFills;
    char Pad1[1];
    uint16_t ExecRestatementReason;
    uint8_t PartyIdEnteringFirm;
    char OrdStatus;
    char ExecType;
    uint8_t OrderEventType;
    uint8_t MatchType;
    uint8_t Side;
    uint8_t OrdType;
    uint8_t TradingCapacity;
    uint8_t TimeInForce;
    uint8_t ExecInst;
    uint8_t TradingSessionSubId;
    uint8_t ApplSeqIndicator;
    uint8_t Triggered;
    uint8_t OrderAttributeLiquidityProvision;
    char PartyEnteringFirm[5];
    char PartyEnteringTrader[6];
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FixClOrdId[20];
} SpecialistOrderBookNotificationT;

/*
 * Structure: Specialist Rfq Reject Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    uint64_t QuoteId;
    int32_t MarketSegmentId;
    uint8_t QuoteRequestRejectReason;
    char PartyExecutingFirm[5];
    char Pad6[6];
} SpecialistRfqRejectRequestT;

/*
 * Structure: Specialist Rfq Reply Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    int64_t SecurityId;
    uint64_t TransactTime;
    uint64_t QuoteId;
    uint64_t BidPx;
    uint64_t BidSize;
    uint64_t OfferPx;
    uint64_t OfferSize;
    int32_t MarketSegmentId;
    char PartyExecutingFirm[5];
    char Pad7[7];
} SpecialistRfqReplyNotificationT;

/*
 * Structure: Specialist Rfq Reply Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    uint64_t QuoteId;
    uint64_t BidPx;
    uint64_t BidSize;
    uint64_t OfferPx;
    uint64_t OfferSize;
    int32_t MarketSegmentId;
    char PartyExecutingFirm[5];
    char Pad7[7];
} SpecialistRfqReplyRequestT;

/*
 * Structure: Specialist Rfq Reply Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t TransactTime;
} SpecialistRfqReplyResponseT;

/*
 * Structure: Specialist Security State Change Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    int32_t MarketSegmentId;
    uint8_t EventType;
    char Pad3[3];
} SpecialistSecurityStateChangeRequestT;

/*
 * Structure: Specialist Security State Change Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NrResponseHeaderMe[0];
    uint64_t SecurityStatusReportId;
} SpecialistSecurityStateChangeResponseT;

/*
 * Structure: Srqs Quote Entry Grp
 */ 
typedef struct {
    uint64_t TransactTime;
    uint64_t QuoteId;
    uint64_t SecondaryQuoteId;
    uint64_t BidPx;
    uint64_t BidSize;
    uint64_t OfferPx;
    uint64_t OfferSize;
    uint32_t PartyIdExecutingTrader;
    uint8_t QuotingStatus;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char PartyEnteringTrader[6];
    char Pad2[2];
} SrqsQuoteEntryGrpT;

/*
 * Structure: Subscribe Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint32_t SubscriptionScope;
    uint8_t RefApplId;
    char Pad3[3];
} SubscribeRequestT;

/*
 * Structure: Subscribe Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
    uint32_t ApplSubId;
    char Pad4[4];
} SubscribeResponseT;

/*
 * Structure: Tes Approve Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    int64_t SecurityId;
    uint64_t LastPx;
    uint64_t AllocQty;
    uint64_t TransactTime;
    uint64_t TransBkdTime;
    uint64_t SettlCurrFxRate;
    int32_t MarketSegmentId;
    uint32_t PackageId;
    uint32_t TesExecId;
    uint32_t AllocId;
    uint32_t SettlDate;
    uint32_t TesEnrichmentRuleId;
    uint32_t AutoApprovalRuleId;
    uint16_t TrdType;
    uint16_t VarTextLen;
    uint8_t Side;
    uint8_t ValueCheckTypeValue;
    uint8_t ValueCheckTypeQuantity;
    uint8_t TradeReportType;
    uint8_t TradingCapacity;
    uint8_t TradeAllocStatus;
    char MessageEventSource;
    char TradeReportId[20];
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    uint8_t PartyIdEnteringFirm;
    char PartyEnteringTrader[6];
    char RootPartyExecutingFirm[5];
    char RootPartyExecutingTrader[6];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
} TesApproveBroadcastT;

/*
 * Structure: Tes Delete Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    int32_t MarketSegmentId;
    uint32_t PackageId;
    uint32_t TesExecId;
    uint16_t TrdType;
    uint8_t DeleteReason;
    uint8_t TradeReportType;
    char MessageEventSource;
    char TradeReportId[20];
    char Pad3[3];
} TesDeleteBroadcastT;

/*
 * Structure: Tes Execution Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    int32_t MarketSegmentId;
    uint32_t PackageId;
    uint32_t TesExecId;
    uint32_t AllocId;
    uint16_t TrdType;
    uint8_t TradeReportType;
    uint8_t Side;
    char MessageEventSource;
    char Pad3[3];
} TesExecutionBroadcastT;

/*
 * Structure: Tes Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
    uint32_t TesExecId;
    char TradeReportId[20];
} TesResponseT;

/*
 * Structure: Tes Trade Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    int64_t SecurityId;
    uint64_t LastPx;
    uint64_t LastQty;
    uint64_t TransactTime;
    uint64_t SettlCurrAmt;
    uint64_t SideGrossTradeAmt;
    uint64_t SettlCurrFxRate;
    uint64_t AccruedInteresAmt;
    uint64_t CouponRate;
    uint64_t RootPartyIdClientId;
    uint64_t ExecutingTrader;
    uint64_t RootPartyIdInvestmentDecisionMaker;
    uint32_t PackageId;
    int32_t MarketSegmentId;
    uint32_t TradeId;
    uint32_t TradeDate;
    uint32_t SideTradeId;
    uint32_t RootPartyIdSessionId;
    uint32_t RootPartyIdSettlementUnit;
    uint32_t RootPartyIdContraUnit;
    uint32_t RootPartyIdContraSettlementUnit;
    uint32_t OrigTradeId;
    uint32_t RootPartyIdExecutingUnit;
    uint32_t RootPartyIdExecutingTrader;
    uint32_t RootPartyIdClearingUnit;
    uint32_t SettlDate;
    uint32_t NumDaysInterest;
    uint32_t NegotiationId;
    uint32_t SrqsRelatedTradeId;
    uint16_t TrdType;
    uint16_t LastMkt;
    uint8_t Side;
    uint8_t TradingCapacity;
    uint8_t TradeReportType;
    uint8_t TransferReason;
    uint8_t TradePublishIndicator;
    uint8_t DeliveryType;
    uint8_t LastCouponDeviationIndicator;
    uint8_t RefinancingEligibilityIndicator;
    uint8_t ClearingInstruction;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t ExecutingTraderQualifier;
    uint8_t RootPartyIdInvestmentDecisionMakerQualifier;
    uint8_t OrderOrigination;
    char Account[2];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char SettlCurrency[3];
    char RootPartyExecutingFirm[5];
    char RootPartyExecutingTrader[6];
    char RootPartyClearingFirm[5];
    char RootPartyExecutingFirmKvNumber[4];
    char RootPartySettlementAccount[35];
    char RootPartySettlementLocation[3];
    char RootPartySettlementFirm[5];
    char RootPartyContraFirm[5];
    char RootPartyContraSettlementFirm[5];
    char RootPartyContraFirmKvNumber[4];
    char RootPartyContraSettlementAccount[35];
    char RootPartyContraSettlementLocation[3];
    char RootPartyIdExecutionVenue[4];
    char RegulatoryTradeId[52];
    char Pad3[3];
} TesTradeBroadcastT;

/*
 * Structure: Tes Trading Session Status Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint32_t TradeDate;
    uint8_t TradSesEvent;
    char Pad3[3];
} TesTradingSessionStatusBroadcastT;

/*
 * Structure: Throttle Update Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char NotifHeader[0];
    int64_t ThrottleTimeInterval;
    uint32_t ThrottleNoMsgs;
    uint32_t ThrottleDisconnectLimit;
} ThrottleUpdateNotificationT;

/*
 * Structure: Tm Trading Session Status Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint8_t TradSesEvent;
    char Pad7[7];
} TmTradingSessionStatusBroadcastT;

/*
 * Structure: Trade Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    int64_t SecurityId;
    uint64_t Price;
    uint64_t LastPx;
    uint64_t LastQty;
    uint64_t SettlCurrAmt;
    uint64_t SettlCurrFxRate;
    uint64_t TransactTime;
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t LeavesQty;
    uint64_t CumQty;
    uint64_t SideGrossTradeAmt;
    uint64_t AccruedInteresAmt;
    uint64_t CouponRate;
    uint64_t RootPartyIdClientId;
    uint64_t ExecutingTrader;
    uint64_t RootPartyIdInvestmentDecisionMaker;
    uint32_t TradeId;
    uint32_t OrigTradeId;
    uint32_t RootPartyIdExecutingUnit;
    uint32_t RootPartyIdSessionId;
    uint32_t RootPartyIdExecutingTrader;
    uint32_t RootPartyIdSettlementUnit;
    uint32_t RootPartyIdClearingUnit;
    uint32_t RootPartyIdContraUnit;
    uint32_t RootPartyIdContraSettlementUnit;
    uint32_t PartyIdSpecialistTrader;
    uint32_t OrderIdSfx;
    int32_t MarketSegmentId;
    uint32_t SideTradeId;
    uint32_t SideTradeReportId;
    uint32_t TradeNumber;
    uint32_t MatchDate;
    uint32_t SettlDate;
    uint32_t TrdMatchId;
    uint32_t NumDaysInterest;
    uint16_t LastMkt;
    uint8_t TradeReportType;
    uint8_t TransferReason;
    uint8_t MatchType;
    uint8_t MatchSubType;
    uint8_t Side;
    uint8_t SideLiquidityInd;
    uint8_t DeliveryType;
    uint8_t TradingCapacity;
    uint8_t LastCouponDeviationIndicator;
    uint8_t RefinancingEligibilityIndicator;
    uint8_t ClearingInstruction;
    uint8_t OrderOrigination;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t ExecutingTraderQualifier;
    uint8_t RootPartyIdInvestmentDecisionMakerQualifier;
    char Account[2];
    char SettlCurrency[3];
    char Currency[3];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char OrderCategory;
    uint8_t OrdType;
    char RootPartyExecutingFirm[5];
    char RootPartyExecutingTrader[6];
    char RootPartyClearingFirm[5];
    char RootPartyExecutingFirmKvNumber[4];
    char RootPartySettlementAccount[35];
    char RootPartySettlementLocation[3];
    char RootPartySettlementFirm[5];
    char RootPartyContraFirm[5];
    char RootPartyContraSettlementFirm[5];
    char RootPartyContraFirmKvNumber[4];
    char RootPartyContraSettlementAccount[35];
    char RootPartyContraSettlementLocation[3];
    char PartySpecialistFirm[5];
    char PartySpecialistTrader[6];
    char RegulatoryTradeId[52];
    char RootPartyIdExecutionVenue[4];
    char Pad3[3];
} TradeBroadcastT;

/*
 * Structure: Trading Session Status Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    int32_t MarketSegmentId;
    uint32_t TradeDate;
    uint8_t TradSesEvent;
    char RefApplLastMsgId[16];
    char Pad7[7];
} TradingSessionStatusBroadcastT;

/*
 * Structure: Trailing Stop Update Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeaderMe[0];
    uint64_t OrderId;
    uint64_t ClOrdId;
    uint64_t OrigClOrdId;
    int64_t SecurityId;
    uint64_t ExecId;
    uint64_t StopPx;
    uint64_t OrderQty;
    uint32_t OrderIdSfx;
    int32_t MarketSegmentId;
    uint16_t ExecRestatementReason;
    char OrdStatus;
    char ExecType;
    uint8_t Side;
    char FixClOrdId[20];
    char Pad7[7];
} TrailingStopUpdateNotificationT;

/*
 * Structure: Unsubscribe Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint32_t RefApplSubId;
    char Pad4[4];
} UnsubscribeRequestT;

/*
 * Structure: Unsubscribe Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
} UnsubscribeResponseT;

/*
 * Structure: User Login Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint32_t Username;
    char Password[32];
    char Pad4[4];
} UserLoginRequestT;

/*
 * Structure: User Login Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
} UserLoginResponseT;

/*
 * Structure: User Logout Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint32_t Username;
    char Pad4[4];
} UserLogoutRequestT;

/*
 * Structure: User Logout Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
} UserLogoutResponseT;

/*
 * Structure: Xetra En Light Create Deal Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    uint64_t LastPx;
    uint64_t LastQty;
    uint64_t QuoteId;
    int64_t SecurityId;
    uint64_t PartyIdClientId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    uint32_t NegotiationId;
    uint32_t TradeId;
    uint32_t SettlDate;
    uint8_t TradingCapacity;
    uint8_t TrdRptStatus;
    char MessageEventSource;
    uint8_t Side;
    uint8_t AllocMethod;
    uint8_t NoOrderBookItems;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t ExecutingTraderQualifier;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    char RootPartyExecutingFirm[5];
    char RootPartyExecutingTrader[6];
    char RootPartyEnteringTrader[6];
    char TargetPartyExecutingFirm[5];
    char TargetPartyExecutingTrader[6];
    char FirmTradeId[20];
    char FirmNegotiationId[20];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char Pad7[7];
} XetraEnLightCreateDealNotificationT;

/*
 * Structure: Xetra En Light Deal Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
    int64_t SecurityId;
    uint64_t QuoteId;
    uint32_t NegotiationId;
    uint32_t TradeId;
    uint32_t SecondaryTradeId;
    char FirmTradeId[20];
    char FirmNegotiationId[20];
    char Pad4[4];
} XetraEnLightDealResponseT;

/*
 * Structure: Xetra En Light Enter Quote Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t BidPx;
    uint64_t OfferPx;
    uint64_t BidSize;
    uint64_t OfferSize;
    uint64_t PartyIdClientId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    int32_t MarketSegmentId;
    uint32_t NegotiationId;
    uint8_t ValueCheckTypeQuantity;
    uint8_t ValueCheckTypeValue;
    uint8_t TradingCapacity;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t ExecutingTraderQualifier;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char Pad7[7];
} XetraEnLightEnterQuoteRequestT;

/*
 * Structure: Xetra En Light Hit Quote Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t QuoteId;
    uint64_t OrderQty;
    uint64_t Price;
    uint64_t PartyIdClientId;
    uint64_t PartyIdInvestmentDecisionMaker;
    uint64_t ExecutingTrader;
    int32_t MarketSegmentId;
    uint32_t NegotiationId;
    uint8_t Side;
    uint8_t ValueCheckTypeQuantity;
    uint8_t ValueCheckTypeValue;
    uint8_t TradingCapacity;
    uint8_t OrderAttributeLiquidityProvision;
    uint8_t ExecutingTraderQualifier;
    uint8_t AllocMethod;
    uint8_t PartyIdInvestmentDecisionMakerQualifier;
    uint8_t OrderOrigination;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FirmTradeId[20];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
} XetraEnLightHitQuoteRequestT;

/*
 * Structure: Xetra En Light Negotiation Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    uint64_t BidPx;
    uint64_t OfferPx;
    uint64_t LeavesQty;
    uint32_t NegotiationId;
    uint32_t NumberOfRespondents;
    uint32_t SettlDate;
    uint8_t QuoteStatus;
    uint8_t Side;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char PartyEnteringTrader[6];
    char TargetPartyExecutingFirm[5];
    char TargetPartyExecutingTrader[6];
    char FirmNegotiationId[20];
    char FreeText5[132];
    char Pad6[6];
} XetraEnLightNegotiationNotificationT;

/*
 * Structure: Xetra En Light Negotiation Requester Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    uint64_t TrdRegTsExecutionTime;
    uint64_t BidPx;
    uint64_t OfferPx;
    uint64_t OrderQty;
    uint64_t LastPx;
    uint64_t LeavesQty;
    uint64_t LastQty;
    uint32_t NegotiationId;
    uint32_t NumberOfRespondents;
    uint32_t SettlDate;
    uint8_t QuoteStatus;
    uint8_t NoTargetPartyIDs;
    uint8_t NumberOfRespDisclosureInstruction;
    uint8_t Side;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char PartyEnteringTrader[6];
    char FirmNegotiationId[20];
    char FreeText5[132];
    char Pad7[7];
} XetraEnLightNegotiationRequesterNotificationT;

/*
 * Structure: Xetra En Light Negotiation Status Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    uint32_t NegotiationId;
    uint8_t QuoteStatus;
    char FirmNegotiationId[20];
    char Pad7[7];
} XetraEnLightNegotiationStatusNotificationT;

/*
 * Structure: Xetra En Light Open Negotiation Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    uint64_t NegotiationStartTime;
    int64_t SecurityId;
    uint64_t BidPx;
    uint64_t OfferPx;
    uint64_t LeavesQty;
    uint64_t ExpireTime;
    uint32_t NegotiationId;
    int32_t MarketSegmentId;
    uint32_t NumberOfRespondents;
    uint32_t SettlDate;
    uint8_t QuoteStatus;
    uint8_t Side;
    uint8_t RespondentType;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char PartyEnteringTrader[6];
    char TargetPartyExecutingFirm[5];
    char TargetPartyExecutingTrader[6];
    char FirmNegotiationId[20];
    char FreeText5[132];
    char Pad1[1];
} XetraEnLightOpenNegotiationNotificationT;

/*
 * Structure: Xetra En Light Open Negotiation Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int64_t SecurityId;
    uint64_t BidPx;
    uint64_t OfferPx;
    uint64_t OrderQty;
    uint64_t ValidUntilTime;
    int32_t MarketSegmentId;
    uint32_t SettlDate;
    uint8_t NoTargetPartyIDs;
    uint8_t NumberOfRespDisclosureInstruction;
    uint8_t Side;
    uint8_t ValueCheckTypeValue;
    uint8_t ValueCheckTypeQuantity;
    uint8_t RespondentType;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FreeText5[132];
    char QuoteReqId[20];
    char Pad7[7];
} XetraEnLightOpenNegotiationRequestT;

/*
 * Structure: Xetra En Light Open Negotiation Requester Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    int64_t SecurityId;
    uint64_t BidPx;
    uint64_t OfferPx;
    uint64_t OrderQty;
    uint64_t LastPx;
    uint64_t LastQty;
    uint64_t ExpireTime;
    uint32_t NegotiationId;
    int32_t MarketSegmentId;
    uint32_t NumberOfRespondents;
    uint32_t SettlDate;
    uint8_t QuoteStatus;
    uint8_t NoTargetPartyIDs;
    uint8_t Side;
    uint8_t NumberOfRespDisclosureInstruction;
    uint8_t RespondentType;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char PartyEnteringTrader[6];
    char FirmNegotiationId[20];
    char FreeText5[132];
    char Pad2[2];
} XetraEnLightOpenNegotiationRequesterNotificationT;

/*
 * Structure: Xetra En Light Quote Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    uint64_t QuoteId;
    uint64_t SecondaryQuoteId;
    uint64_t BidPx;
    uint64_t BidSize;
    uint64_t OfferPx;
    uint64_t OfferSize;
    uint32_t NegotiationId;
    uint8_t TradingCapacity;
    uint8_t QuotingStatus;
    uint8_t QuoteEventReason;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char PartyEnteringTrader[6];
    char QuoteReqId[20];
    char FreeText1[12];
    char FreeText2[12];
    char FreeText4[16];
    char Pad4[4];
} XetraEnLightQuoteNotificationT;

/*
 * Structure: Xetra En Light Quote Requester Notification
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint64_t TransactTime;
    uint32_t NegotiationId;
    uint32_t TradeId;
    char QuoteReqId[20];
    uint8_t NoQuoteEntries;
    char Pad3[3];
} XetraEnLightQuoteRequesterNotificationT;

/*
 * Structure: Xetra En Light Quote Response
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char ResponseHeader[0];
    uint64_t QuoteId;
    uint32_t NegotiationId;
    char QuoteReqId[20];
} XetraEnLightQuoteResponseT;

/*
 * Structure: Xetra En Light Quoting Status Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    int32_t MarketSegmentId;
    uint32_t NegotiationId;
    uint8_t QuotingStatus;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char Pad4[4];
} XetraEnLightQuotingStatusRequestT;

/*
 * Structure: Xetra En Light Status Broadcast
 */ 
typedef struct {
    char MessageHeaderOut[0];
    char RbcHeader[0];
    uint32_t TradeDate;
    uint8_t TradSesEvent;
    char Pad3[3];
} XetraEnLightStatusBroadcastT;

/*
 * Structure: Xetra En Light Target Parties
 */ 
typedef struct {
    uint32_t TargetPartyIdExecutingTrader;
    char TargetPartyExecutingFirm[5];
    char TargetPartyExecutingTrader[6];
    char Pad1[1];
} XetraEnLightTargetPartiesT;

/*
 * Structure: Xetra En Light Update Negotiation Request
 */ 
typedef struct {
    char MessageHeaderIn[0];
    char RequestHeader[0];
    uint64_t BidPx;
    uint64_t OfferPx;
    uint64_t OrderQty;
    int32_t MarketSegmentId;
    uint32_t NegotiationId;
    uint32_t SettlDate;
    uint8_t NoTargetPartyIDs;
    uint8_t NumberOfRespDisclosureInstruction;
    uint8_t Side;
    uint8_t QuoteCancelType;
    char PartyExecutingFirm[5];
    char PartyExecutingTrader[6];
    char FreeText5[132];
    char Pad1[1];
} XetraEnLightUpdateNegotiationRequestT;

